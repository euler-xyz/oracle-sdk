export default {
  abi: [
    {
      type: 'function',
      name: 'STETH',
      inputs: [],
      outputs: [{ name: '', type: 'address', internalType: 'address' }],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'WSTETH',
      inputs: [],
      outputs: [{ name: '', type: 'address', internalType: 'address' }],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'getQuote',
      inputs: [
        { name: 'inAmount', type: 'uint256', internalType: 'uint256' },
        { name: 'base', type: 'address', internalType: 'address' },
        { name: 'quote', type: 'address', internalType: 'address' },
      ],
      outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'getQuotes',
      inputs: [
        { name: 'inAmount', type: 'uint256', internalType: 'uint256' },
        { name: 'base', type: 'address', internalType: 'address' },
        { name: 'quote', type: 'address', internalType: 'address' },
      ],
      outputs: [
        { name: '', type: 'uint256', internalType: 'uint256' },
        { name: '', type: 'uint256', internalType: 'uint256' },
      ],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'name',
      inputs: [],
      outputs: [{ name: '', type: 'string', internalType: 'string' }],
      stateMutability: 'view',
    },
    {
      type: 'error',
      name: 'PriceOracle_NotSupported',
      inputs: [
        { name: 'base', type: 'address', internalType: 'address' },
        { name: 'quote', type: 'address', internalType: 'address' },
      ],
    },
  ],
  bytecode: {
    object:
      '0x608060405234801561000f575f80fd5b506106e28061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80630579e61f1461005957806306fdde031461008a578063ae68676c146100a8578063d9fb643a146100d8578063e00bfe50146100f6575b5f80fd5b610073600480360381019061006e91906104d5565b610114565b604051610081929190610534565b60405180910390f35b610092610133565b60405161009f91906105e5565b60405180910390f35b6100c260048036038101906100bd91906104d5565b61016c565b6040516100cf9190610605565b60405180910390f35b6100e0610181565b6040516100ed919061062d565b60405180910390f35b6100fe610199565b60405161010b919061062d565b60405180910390f35b5f805f6101228686866101b1565b905080819250925050935093915050565b6040518060400160405280600a81526020017f4c69646f4f7261636c650000000000000000000000000000000000000000000081525081565b5f6101788484846101b1565b90509392505050565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b5f73ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156102405750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156102d85773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff166319208451856040518263ffffffff1660e01b81526004016102929190610605565b602060405180830381865afa1580156102ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d1919061065a565b905061043d565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015610366575073ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156103fe5773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff16637a28fb88856040518263ffffffff1660e01b81526004016103b89190610605565b602060405180830381865afa1580156103d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f7919061065a565b905061043d565b82826040517f4ca22af0000000000000000000000000000000000000000000000000000000008152600401610434929190610685565b60405180910390fd5b9392505050565b5f80fd5b5f819050919050565b61045a81610448565b8114610464575f80fd5b50565b5f8135905061047581610451565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104a48261047b565b9050919050565b6104b48161049a565b81146104be575f80fd5b50565b5f813590506104cf816104ab565b92915050565b5f805f606084860312156104ec576104eb610444565b5b5f6104f986828701610467565b935050602061050a868287016104c1565b925050604061051b868287016104c1565b9150509250925092565b61052e81610448565b82525050565b5f6040820190506105475f830185610525565b6105546020830184610525565b9392505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610592578082015181840152602081019050610577565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6105b78261055b565b6105c18185610565565b93506105d1818560208601610575565b6105da8161059d565b840191505092915050565b5f6020820190508181035f8301526105fd81846105ad565b905092915050565b5f6020820190506106185f830184610525565b92915050565b6106278161049a565b82525050565b5f6020820190506106405f83018461061e565b92915050565b5f8151905061065481610451565b92915050565b5f6020828403121561066f5761066e610444565b5b5f61067c84828501610646565b91505092915050565b5f6040820190506106985f83018561061e565b6106a5602083018461061e565b939250505056fea2646970667358221220c9296b669111a14ebe7cea47407006e7582fdcab02ca283e90bfd37ad802e21964736f6c63430008170033',
    sourceMap: '378:1347:82:-:0;;;;;;;;;;;;;;;;;;;',
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      '0x608060405234801561000f575f80fd5b5060043610610055575f3560e01c80630579e61f1461005957806306fdde031461008a578063ae68676c146100a8578063d9fb643a146100d8578063e00bfe50146100f6575b5f80fd5b610073600480360381019061006e91906104d5565b610114565b604051610081929190610534565b60405180910390f35b610092610133565b60405161009f91906105e5565b60405180910390f35b6100c260048036038101906100bd91906104d5565b61016c565b6040516100cf9190610605565b60405180910390f35b6100e0610181565b6040516100ed919061062d565b60405180910390f35b6100fe610199565b60405161010b919061062d565b60405180910390f35b5f805f6101228686866101b1565b905080819250925050935093915050565b6040518060400160405280600a81526020017f4c69646f4f7261636c650000000000000000000000000000000000000000000081525081565b5f6101788484846101b1565b90509392505050565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b5f73ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156102405750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156102d85773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff166319208451856040518263ffffffff1660e01b81526004016102929190610605565b602060405180830381865afa1580156102ad573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d1919061065a565b905061043d565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015610366575073ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156103fe5773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff16637a28fb88856040518263ffffffff1660e01b81526004016103b89190610605565b602060405180830381865afa1580156103d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f7919061065a565b905061043d565b82826040517f4ca22af0000000000000000000000000000000000000000000000000000000008152600401610434929190610685565b60405180910390fd5b9392505050565b5f80fd5b5f819050919050565b61045a81610448565b8114610464575f80fd5b50565b5f8135905061047581610451565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104a48261047b565b9050919050565b6104b48161049a565b81146104be575f80fd5b50565b5f813590506104cf816104ab565b92915050565b5f805f606084860312156104ec576104eb610444565b5b5f6104f986828701610467565b935050602061050a868287016104c1565b925050604061051b868287016104c1565b9150509250925092565b61052e81610448565b82525050565b5f6040820190506105475f830185610525565b6105546020830184610525565b9392505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610592578082015181840152602081019050610577565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6105b78261055b565b6105c18185610565565b93506105d1818560208601610575565b6105da8161059d565b840191505092915050565b5f6020820190508181035f8301526105fd81846105ad565b905092915050565b5f6020820190506106185f830184610525565b92915050565b6106278161049a565b82525050565b5f6020820190506106405f83018461061e565b92915050565b5f8151905061065481610451565b92915050565b5f6020828403121561066f5761066e610444565b5b5f61067c84828501610646565b91505092915050565b5f6040820190506106985f83018561061e565b6106a5602083018461061e565b939250505056fea2646970667358221220c9296b669111a14ebe7cea47407006e7582fdcab02ca283e90bfd37ad802e21964736f6c63430008170033',
    sourceMap:
      '378:1347:82:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1003:215:72;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;452:42:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;759:153:72;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;773:75:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;593:74;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1003:215:72;1092:7;1101;1120:17;1140:32;1150:8;1160:4;1166:5;1140:9;:32::i;:::-;1120:52;;1190:9;1201;1182:29;;;;;1003:215;;;;;;:::o;452:42:82:-;;;;;;;;;;;;;;;;;;;:::o;759:153:72:-;847:7;873:32;883:8;893:4;899:5;873:9;:32::i;:::-;866:39;;759:153;;;;;:::o;773:75:82:-;806:42;773:75;:::o;593:74::-;625:42;593:74;:::o;1305:418::-;1403:7;625:42;1426:13;;:4;:13;;;:32;;;;;806:42;1443:15;;:5;:15;;;1426:32;1422:234;;;625:42;1481:34;;;1516:8;1481:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1474:51;;;;1422:234;806:42;1546:14;;:4;:14;;;:32;;;;;625:42;1564:14;;:5;:14;;;1546:32;1542:114;;;625:42;1601:34;;;1636:8;1601:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1594:51;;;;1542:114;1704:4;1710:5;1672:44;;;;;;;;;;;;:::i;:::-;;;;;;;;1305:418;;;;;;:::o;88:117:165:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:126::-;727:7;767:42;760:5;756:54;745:65;;690:126;;;:::o;822:96::-;859:7;888:24;906:5;888:24;:::i;:::-;877:35;;822:96;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:619::-;1274:6;1282;1290;1339:2;1327:9;1318:7;1314:23;1310:32;1307:119;;;1345:79;;:::i;:::-;1307:119;1465:1;1490:53;1535:7;1526:6;1515:9;1511:22;1490:53;:::i;:::-;1480:63;;1436:117;1592:2;1618:53;1663:7;1654:6;1643:9;1639:22;1618:53;:::i;:::-;1608:63;;1563:118;1720:2;1746:53;1791:7;1782:6;1771:9;1767:22;1746:53;:::i;:::-;1736:63;;1691:118;1197:619;;;;;:::o;1822:118::-;1909:24;1927:5;1909:24;:::i;:::-;1904:3;1897:37;1822:118;;:::o;1946:332::-;2067:4;2105:2;2094:9;2090:18;2082:26;;2118:71;2186:1;2175:9;2171:17;2162:6;2118:71;:::i;:::-;2199:72;2267:2;2256:9;2252:18;2243:6;2199:72;:::i;:::-;1946:332;;;;;:::o;2284:99::-;2336:6;2370:5;2364:12;2354:22;;2284:99;;;:::o;2389:169::-;2473:11;2507:6;2502:3;2495:19;2547:4;2542:3;2538:14;2523:29;;2389:169;;;;:::o;2564:246::-;2645:1;2655:113;2669:6;2666:1;2663:13;2655:113;;;2754:1;2749:3;2745:11;2739:18;2735:1;2730:3;2726:11;2719:39;2691:2;2688:1;2684:10;2679:15;;2655:113;;;2802:1;2793:6;2788:3;2784:16;2777:27;2626:184;2564:246;;;:::o;2816:102::-;2857:6;2908:2;2904:7;2899:2;2892:5;2888:14;2884:28;2874:38;;2816:102;;;:::o;2924:377::-;3012:3;3040:39;3073:5;3040:39;:::i;:::-;3095:71;3159:6;3154:3;3095:71;:::i;:::-;3088:78;;3175:65;3233:6;3228:3;3221:4;3214:5;3210:16;3175:65;:::i;:::-;3265:29;3287:6;3265:29;:::i;:::-;3260:3;3256:39;3249:46;;3016:285;2924:377;;;;:::o;3307:313::-;3420:4;3458:2;3447:9;3443:18;3435:26;;3507:9;3501:4;3497:20;3493:1;3482:9;3478:17;3471:47;3535:78;3608:4;3599:6;3535:78;:::i;:::-;3527:86;;3307:313;;;;:::o;3626:222::-;3719:4;3757:2;3746:9;3742:18;3734:26;;3770:71;3838:1;3827:9;3823:17;3814:6;3770:71;:::i;:::-;3626:222;;;;:::o;3854:118::-;3941:24;3959:5;3941:24;:::i;:::-;3936:3;3929:37;3854:118;;:::o;3978:222::-;4071:4;4109:2;4098:9;4094:18;4086:26;;4122:71;4190:1;4179:9;4175:17;4166:6;4122:71;:::i;:::-;3978:222;;;;:::o;4206:143::-;4263:5;4294:6;4288:13;4279:22;;4310:33;4337:5;4310:33;:::i;:::-;4206:143;;;;:::o;4355:351::-;4425:6;4474:2;4462:9;4453:7;4449:23;4445:32;4442:119;;;4480:79;;:::i;:::-;4442:119;4600:1;4625:64;4681:7;4672:6;4661:9;4657:22;4625:64;:::i;:::-;4615:74;;4571:128;4355:351;;;;:::o;4712:332::-;4833:4;4871:2;4860:9;4856:18;4848:26;;4884:71;4952:1;4941:9;4937:17;4928:6;4884:71;:::i;:::-;4965:72;5033:2;5022:9;5018:18;5009:6;4965:72;:::i;:::-;4712:332;;;;;:::o',
    linkReferences: {},
  },
  methodIdentifiers: {
    'STETH()': 'e00bfe50',
    'WSTETH()': 'd9fb643a',
    'getQuote(uint256,address,address)': 'ae68676c',
    'getQuotes(uint256,address,address)': '0579e61f',
    'name()': '06fdde03',
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"}],"name":"PriceOracle_NotSupported","type":"error"},{"inputs":[],"name":"STETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WSTETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inAmount","type":"uint256"},{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"}],"name":"getQuote","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inAmount","type":"uint256"},{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"}],"name":"getQuotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Euler Labs (https://www.eulerlabs.com/)","custom:security-contact":"security@euler.xyz","errors":{"PriceOracle_NotSupported(address,address)":[{"params":{"base":"The address of the base asset.","quote":"The address of the quote asset."}}]},"kind":"dev","methods":{"getQuote(uint256,address,address)":{"params":{"base":"The token that is being priced.","inAmount":"The amount of `base` to convert.","quote":"The token that is the unit of account."},"returns":{"_0":"The amount of `quote` that is equivalent to `inAmount` of `base`."}},"getQuotes(uint256,address,address)":{"details":"Does not support true bid/ask pricing.","params":{"base":"The token that is being priced.","inAmount":"The amount of `base` to convert.","quote":"The token that is the unit of account."},"returns":{"_0":"The amount of `quote` you would get for selling `inAmount` of `base`.","_1":"The amount of `quote` you would spend for buying `inAmount` of `base`."}}},"stateVariables":{"STETH":{"details":"This address will not change."},"WSTETH":{"details":"This address will not change."},"name":{"return":"The name of the oracle.","returns":{"_0":"The name of the oracle."}}},"title":"LidoOracle","version":1},"userdoc":{"errors":{"PriceOracle_NotSupported(address,address)":[{"notice":"The base/quote path is not supported."}]},"kind":"user","methods":{"STETH()":{"notice":"The address of Lido staked Ether."},"WSTETH()":{"notice":"The address of Lido wrapped staked Ether"},"getQuote(uint256,address,address)":{"notice":"One-sided price: How much quote token you would get for inAmount of base token, assuming no price spread."},"getQuotes(uint256,address,address)":{"notice":"Two-sided price: How much quote token you would get/spend for selling/buying inAmount of base token."},"name()":{"notice":"Get the name of the oracle."}},"notice":"Adapter for pricing Lido stEth <-> wstEth via the stEth contract.","version":1}},"settings":{"compilationTarget":{"src/adapter/lido/LidoOracle.sol":"LidoOracle"},"evmVersion":"shanghai","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":@pendle/core-v2/=lib/pendle-core-v2-public/contracts/",":@pyth/=lib/pyth-sdk-solidity/",":@redstone/evm-connector/=lib/redstone-oracles-monorepo/packages/evm-connector/contracts/",":@solady/=lib/solady/src/",":@uniswap/v3-core/=lib/v3-core/",":@uniswap/v3-periphery/=lib/v3-periphery/",":ds-test/=lib/forge-std/lib/ds-test/src/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":ethereum-vault-connector/=lib/ethereum-vault-connector/src/",":forge-std/=lib/forge-std/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/",":openzeppelin/=lib/openzeppelin-contracts/contracts/",":pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/",":pyth-sdk-solidity/=lib/pyth-sdk-solidity/",":redstone-oracles-monorepo/=lib/redstone-oracles-monorepo/",":solady/=lib/solady/",":v3-core/=lib/v3-core/contracts/",":v3-periphery/=lib/v3-periphery/contracts/"]},"sources":{"lib/forge-std/src/interfaces/IERC20.sol":{"keccak256":"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947","license":"MIT","urls":["bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7","dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9"]},"src/adapter/BaseAdapter.sol":{"keccak256":"0x1ca090708d2c03edd58fdb6c22638fce41e93c5f4021b382940d088ae49c81e3","license":"GPL-2.0-or-later","urls":["bzz-raw://d00bbb80bdb34321bea2055bcb1364cd860e7662ec513254ffa61698c09526b4","dweb:/ipfs/QmeCE976ZZy6oLCP2emgBjvx8vJxKvoEJ4yF65QKLjQJDo"]},"src/adapter/lido/IStEth.sol":{"keccak256":"0x1b317cd07f9bf07f1742c9cb4864effd6ccd67f4d67e3a950d700fdd44fe3952","license":"GPL-2.0-or-later","urls":["bzz-raw://8ee021222730fb5a64be54503aeaf6f9f66db001b97f24e0ebcebd40b56b1c6e","dweb:/ipfs/QmSZaSYdGredb87SFpu4L25VUmUgcT2rJKzw4FfDPRhkd6"]},"src/adapter/lido/LidoOracle.sol":{"keccak256":"0xdee3ef28b0cd8ac074bd3e12a8960d0b38923dc229a0ab2a04e8a2ae08569778","license":"GPL-2.0-or-later","urls":["bzz-raw://a7b59f3577b2841158d7c25a27b5c2b97a767cae1a45467f1d8534b7b85edd90","dweb:/ipfs/QmPPNpLaMRKEtNw5GkNKQZxp5ng9G4EduFXS699rQyr7hL"]},"src/interfaces/IPriceOracle.sol":{"keccak256":"0x03567dd4084dc74a9e2f9eeffce4d9047989b0d2122820716c3bc75891484308","license":"GPL-2.0-or-later","urls":["bzz-raw://23965a79475c85a0a8a3a137a76424f60debd9e592bc9127d463392fad7df30f","dweb:/ipfs/QmPc1bV3kZ3ynLGTqG6xRbZ3E5AstYdfipXbysSqYGhJYA"]},"src/lib/Errors.sol":{"keccak256":"0x2551662bcef8d4a5cb7cdc8cd404f28c726af1bcfe7ef371b22d53322a932698","license":"GPL-2.0-or-later","urls":["bzz-raw://1641b99e0c907950448d62205fc23b5550c44899ba8c0bc0274a6b0a501981b9","dweb:/ipfs/QmZvDhw4Ao3m8jRjNjT8Xq8imCPecJyytUTtCUjt5RoB4v"]}},"version":1}',
  metadata: {
    compiler: { version: '0.8.23+commit.f704f362' },
    language: 'Solidity',
    output: {
      abi: [
        {
          inputs: [
            { internalType: 'address', name: 'base', type: 'address' },
            { internalType: 'address', name: 'quote', type: 'address' },
          ],
          type: 'error',
          name: 'PriceOracle_NotSupported',
        },
        {
          inputs: [],
          stateMutability: 'view',
          type: 'function',
          name: 'STETH',
          outputs: [{ internalType: 'address', name: '', type: 'address' }],
        },
        {
          inputs: [],
          stateMutability: 'view',
          type: 'function',
          name: 'WSTETH',
          outputs: [{ internalType: 'address', name: '', type: 'address' }],
        },
        {
          inputs: [
            { internalType: 'uint256', name: 'inAmount', type: 'uint256' },
            { internalType: 'address', name: 'base', type: 'address' },
            { internalType: 'address', name: 'quote', type: 'address' },
          ],
          stateMutability: 'view',
          type: 'function',
          name: 'getQuote',
          outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        },
        {
          inputs: [
            { internalType: 'uint256', name: 'inAmount', type: 'uint256' },
            { internalType: 'address', name: 'base', type: 'address' },
            { internalType: 'address', name: 'quote', type: 'address' },
          ],
          stateMutability: 'view',
          type: 'function',
          name: 'getQuotes',
          outputs: [
            { internalType: 'uint256', name: '', type: 'uint256' },
            { internalType: 'uint256', name: '', type: 'uint256' },
          ],
        },
        {
          inputs: [],
          stateMutability: 'view',
          type: 'function',
          name: 'name',
          outputs: [{ internalType: 'string', name: '', type: 'string' }],
        },
      ],
      devdoc: {
        kind: 'dev',
        methods: {
          'getQuote(uint256,address,address)': {
            params: {
              base: 'The token that is being priced.',
              inAmount: 'The amount of `base` to convert.',
              quote: 'The token that is the unit of account.',
            },
            returns: {
              _0: 'The amount of `quote` that is equivalent to `inAmount` of `base`.',
            },
          },
          'getQuotes(uint256,address,address)': {
            details: 'Does not support true bid/ask pricing.',
            params: {
              base: 'The token that is being priced.',
              inAmount: 'The amount of `base` to convert.',
              quote: 'The token that is the unit of account.',
            },
            returns: {
              _0: 'The amount of `quote` you would get for selling `inAmount` of `base`.',
              _1: 'The amount of `quote` you would spend for buying `inAmount` of `base`.',
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: 'user',
        methods: {
          'STETH()': { notice: 'The address of Lido staked Ether.' },
          'WSTETH()': { notice: 'The address of Lido wrapped staked Ether' },
          'getQuote(uint256,address,address)': {
            notice:
              'One-sided price: How much quote token you would get for inAmount of base token, assuming no price spread.',
          },
          'getQuotes(uint256,address,address)': {
            notice:
              'Two-sided price: How much quote token you would get/spend for selling/buying inAmount of base token.',
          },
          'name()': { notice: 'Get the name of the oracle.' },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        '@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/',
        '@pendle/core-v2/=lib/pendle-core-v2-public/contracts/',
        '@pyth/=lib/pyth-sdk-solidity/',
        '@redstone/evm-connector/=lib/redstone-oracles-monorepo/packages/evm-connector/contracts/',
        '@solady/=lib/solady/src/',
        '@uniswap/v3-core/=lib/v3-core/',
        '@uniswap/v3-periphery/=lib/v3-periphery/',
        'ds-test/=lib/forge-std/lib/ds-test/src/',
        'erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/',
        'ethereum-vault-connector/=lib/ethereum-vault-connector/src/',
        'forge-std/=lib/forge-std/src/',
        'openzeppelin-contracts/=lib/openzeppelin-contracts/',
        'openzeppelin/=lib/openzeppelin-contracts/contracts/',
        'pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/',
        'pyth-sdk-solidity/=lib/pyth-sdk-solidity/',
        'redstone-oracles-monorepo/=lib/redstone-oracles-monorepo/',
        'solady/=lib/solady/',
        'v3-core/=lib/v3-core/contracts/',
        'v3-periphery/=lib/v3-periphery/contracts/',
      ],
      optimizer: { enabled: false, runs: 200 },
      metadata: { bytecodeHash: 'ipfs' },
      compilationTarget: { 'src/adapter/lido/LidoOracle.sol': 'LidoOracle' },
      evmVersion: 'shanghai',
      libraries: {},
    },
    sources: {
      'lib/forge-std/src/interfaces/IERC20.sol': {
        keccak256: '0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947',
        urls: [
          'bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7',
          'dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9',
        ],
        license: 'MIT',
      },
      'src/adapter/BaseAdapter.sol': {
        keccak256: '0x1ca090708d2c03edd58fdb6c22638fce41e93c5f4021b382940d088ae49c81e3',
        urls: [
          'bzz-raw://d00bbb80bdb34321bea2055bcb1364cd860e7662ec513254ffa61698c09526b4',
          'dweb:/ipfs/QmeCE976ZZy6oLCP2emgBjvx8vJxKvoEJ4yF65QKLjQJDo',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/adapter/lido/IStEth.sol': {
        keccak256: '0x1b317cd07f9bf07f1742c9cb4864effd6ccd67f4d67e3a950d700fdd44fe3952',
        urls: [
          'bzz-raw://8ee021222730fb5a64be54503aeaf6f9f66db001b97f24e0ebcebd40b56b1c6e',
          'dweb:/ipfs/QmSZaSYdGredb87SFpu4L25VUmUgcT2rJKzw4FfDPRhkd6',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/adapter/lido/LidoOracle.sol': {
        keccak256: '0xdee3ef28b0cd8ac074bd3e12a8960d0b38923dc229a0ab2a04e8a2ae08569778',
        urls: [
          'bzz-raw://a7b59f3577b2841158d7c25a27b5c2b97a767cae1a45467f1d8534b7b85edd90',
          'dweb:/ipfs/QmPPNpLaMRKEtNw5GkNKQZxp5ng9G4EduFXS699rQyr7hL',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/interfaces/IPriceOracle.sol': {
        keccak256: '0x03567dd4084dc74a9e2f9eeffce4d9047989b0d2122820716c3bc75891484308',
        urls: [
          'bzz-raw://23965a79475c85a0a8a3a137a76424f60debd9e592bc9127d463392fad7df30f',
          'dweb:/ipfs/QmPc1bV3kZ3ynLGTqG6xRbZ3E5AstYdfipXbysSqYGhJYA',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/lib/Errors.sol': {
        keccak256: '0x2551662bcef8d4a5cb7cdc8cd404f28c726af1bcfe7ef371b22d53322a932698',
        urls: [
          'bzz-raw://1641b99e0c907950448d62205fc23b5550c44899ba8c0bc0274a6b0a501981b9',
          'dweb:/ipfs/QmZvDhw4Ao3m8jRjNjT8Xq8imCPecJyytUTtCUjt5RoB4v',
        ],
        license: 'GPL-2.0-or-later',
      },
    },
    version: 1,
  },
  ast: {
    absolutePath: 'src/adapter/lido/LidoOracle.sol',
    id: 52213,
    exportedSymbols: {
      BaseAdapter: [51182],
      Errors: [54043],
      IPriceOracle: [54013],
      IStEth: [52054],
      LidoOracle: [52212],
    },
    nodeType: 'SourceUnit',
    src: '45:1681:82',
    nodes: [
      {
        id: 52137,
        nodeType: 'PragmaDirective',
        src: '45:23:82',
        nodes: [],
        literals: ['solidity', '^', '0.8', '.0'],
      },
      {
        id: 52141,
        nodeType: 'ImportDirective',
        src: '70:69:82',
        nodes: [],
        absolutePath: 'src/adapter/BaseAdapter.sol',
        file: '../BaseAdapter.sol',
        nameLocation: '-1:-1:-1',
        scope: 52213,
        sourceUnit: 51183,
        symbolAliases: [
          {
            foreign: {
              id: 52138,
              name: 'BaseAdapter',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 51182,
              src: '78:11:82',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
          {
            foreign: {
              id: 52139,
              name: 'Errors',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 54043,
              src: '91:6:82',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
          {
            foreign: {
              id: 52140,
              name: 'IPriceOracle',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 54013,
              src: '99:12:82',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
        ],
        unitAlias: '',
      },
      {
        id: 52143,
        nodeType: 'ImportDirective',
        src: '140:36:82',
        nodes: [],
        absolutePath: 'src/adapter/lido/IStEth.sol',
        file: './IStEth.sol',
        nameLocation: '-1:-1:-1',
        scope: 52213,
        sourceUnit: 52055,
        symbolAliases: [
          {
            foreign: {
              id: 52142,
              name: 'IStEth',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 52054,
              src: '148:6:82',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
        ],
        unitAlias: '',
      },
      {
        id: 52212,
        nodeType: 'ContractDefinition',
        src: '378:1347:82',
        nodes: [
          {
            id: 52150,
            nodeType: 'VariableDeclaration',
            src: '452:42:82',
            nodes: [],
            baseFunctions: [53986],
            constant: true,
            documentation: {
              id: 52147,
              nodeType: 'StructuredDocumentation',
              src: '419:28:82',
              text: '@inheritdoc IPriceOracle',
            },
            functionSelector: '06fdde03',
            mutability: 'constant',
            name: 'name',
            nameLocation: '475:4:82',
            scope: 52212,
            stateVariable: true,
            storageLocation: 'default',
            typeDescriptions: {
              typeIdentifier: 't_string_memory_ptr',
              typeString: 'string',
            },
            typeName: {
              id: 52148,
              name: 'string',
              nodeType: 'ElementaryTypeName',
              src: '452:6:82',
              typeDescriptions: {
                typeIdentifier: 't_string_storage_ptr',
                typeString: 'string',
              },
            },
            value: {
              hexValue: '4c69646f4f7261636c65',
              id: 52149,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: 'string',
              lValueRequested: false,
              nodeType: 'Literal',
              src: '482:12:82',
              typeDescriptions: {
                typeIdentifier:
                  't_stringliteral_c987f708ef4d97624df0c1bddedc2484c5c4f8d0fd920baee462ced0514d0310',
                typeString: 'literal_string "LidoOracle"',
              },
              value: 'LidoOracle',
            },
            visibility: 'public',
          },
          {
            id: 52154,
            nodeType: 'VariableDeclaration',
            src: '593:74:82',
            nodes: [],
            constant: true,
            documentation: {
              id: 52151,
              nodeType: 'StructuredDocumentation',
              src: '500:88:82',
              text: '@notice The address of Lido staked Ether.\n @dev This address will not change.',
            },
            functionSelector: 'e00bfe50',
            mutability: 'constant',
            name: 'STETH',
            nameLocation: '617:5:82',
            scope: 52212,
            stateVariable: true,
            storageLocation: 'default',
            typeDescriptions: {
              typeIdentifier: 't_address',
              typeString: 'address',
            },
            typeName: {
              id: 52152,
              name: 'address',
              nodeType: 'ElementaryTypeName',
              src: '593:7:82',
              stateMutability: 'nonpayable',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
            },
            value: {
              hexValue:
                '307861653761623936353230444533413138453565313131423545614162303935333132443766453834',
              id: 52153,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: 'number',
              lValueRequested: false,
              nodeType: 'Literal',
              src: '625:42:82',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
              value: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84',
            },
            visibility: 'public',
          },
          {
            id: 52158,
            nodeType: 'VariableDeclaration',
            src: '773:75:82',
            nodes: [],
            constant: true,
            documentation: {
              id: 52155,
              nodeType: 'StructuredDocumentation',
              src: '673:95:82',
              text: '@notice The address of Lido wrapped staked Ether\n @dev This address will not change.',
            },
            functionSelector: 'd9fb643a',
            mutability: 'constant',
            name: 'WSTETH',
            nameLocation: '797:6:82',
            scope: 52212,
            stateVariable: true,
            storageLocation: 'default',
            typeDescriptions: {
              typeIdentifier: 't_address',
              typeString: 'address',
            },
            typeName: {
              id: 52156,
              name: 'address',
              nodeType: 'ElementaryTypeName',
              src: '773:7:82',
              stateMutability: 'nonpayable',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
            },
            value: {
              hexValue:
                '307837663339433538314635393542353363356362313962443062336638644136633933354532436130',
              id: 52157,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: 'number',
              lValueRequested: false,
              nodeType: 'Literal',
              src: '806:42:82',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
              value: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',
            },
            visibility: 'public',
          },
          {
            id: 52211,
            nodeType: 'FunctionDefinition',
            src: '1305:418:82',
            nodes: [],
            body: {
              id: 52210,
              nodeType: 'Block',
              src: '1412:311:82',
              nodes: [],
              statements: [
                {
                  condition: {
                    commonType: {
                      typeIdentifier: 't_bool',
                      typeString: 'bool',
                    },
                    id: 52177,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    leftExpression: {
                      commonType: {
                        typeIdentifier: 't_address',
                        typeString: 'address',
                      },
                      id: 52173,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        id: 52171,
                        name: 'base',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52163,
                        src: '1426:4:82',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      nodeType: 'BinaryOperation',
                      operator: '==',
                      rightExpression: {
                        id: 52172,
                        name: 'STETH',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52154,
                        src: '1434:5:82',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      src: '1426:13:82',
                      typeDescriptions: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                    },
                    nodeType: 'BinaryOperation',
                    operator: '&&',
                    rightExpression: {
                      commonType: {
                        typeIdentifier: 't_address',
                        typeString: 'address',
                      },
                      id: 52176,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        id: 52174,
                        name: 'quote',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52165,
                        src: '1443:5:82',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      nodeType: 'BinaryOperation',
                      operator: '==',
                      rightExpression: {
                        id: 52175,
                        name: 'WSTETH',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52158,
                        src: '1452:6:82',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      src: '1443:15:82',
                      typeDescriptions: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                    },
                    src: '1426:32:82',
                    typeDescriptions: {
                      typeIdentifier: 't_bool',
                      typeString: 'bool',
                    },
                  },
                  falseBody: {
                    condition: {
                      commonType: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                      id: 52192,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        commonType: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                        id: 52188,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          id: 52186,
                          name: 'base',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52163,
                          src: '1546:4:82',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        nodeType: 'BinaryOperation',
                        operator: '==',
                        rightExpression: {
                          id: 52187,
                          name: 'WSTETH',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52158,
                          src: '1554:6:82',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        src: '1546:14:82',
                        typeDescriptions: {
                          typeIdentifier: 't_bool',
                          typeString: 'bool',
                        },
                      },
                      nodeType: 'BinaryOperation',
                      operator: '&&',
                      rightExpression: {
                        commonType: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                        id: 52191,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          id: 52189,
                          name: 'quote',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52165,
                          src: '1564:5:82',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        nodeType: 'BinaryOperation',
                        operator: '==',
                        rightExpression: {
                          id: 52190,
                          name: 'STETH',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52154,
                          src: '1573:5:82',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        src: '1564:14:82',
                        typeDescriptions: {
                          typeIdentifier: 't_bool',
                          typeString: 'bool',
                        },
                      },
                      src: '1546:32:82',
                      typeDescriptions: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                    },
                    id: 52201,
                    nodeType: 'IfStatement',
                    src: '1542:114:82',
                    trueBody: {
                      id: 52200,
                      nodeType: 'Block',
                      src: '1580:76:82',
                      statements: [
                        {
                          expression: {
                            arguments: [
                              {
                                id: 52197,
                                name: 'inAmount',
                                nodeType: 'Identifier',
                                overloadedDeclarations: [],
                                referencedDeclaration: 52161,
                                src: '1636:8:82',
                                typeDescriptions: {
                                  typeIdentifier: 't_uint256',
                                  typeString: 'uint256',
                                },
                              },
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: 't_uint256',
                                  typeString: 'uint256',
                                },
                              ],
                              expression: {
                                arguments: [
                                  {
                                    id: 52194,
                                    name: 'STETH',
                                    nodeType: 'Identifier',
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 52154,
                                    src: '1608:5:82',
                                    typeDescriptions: {
                                      typeIdentifier: 't_address',
                                      typeString: 'address',
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: 't_address',
                                      typeString: 'address',
                                    },
                                  ],
                                  id: 52193,
                                  name: 'IStEth',
                                  nodeType: 'Identifier',
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 52054,
                                  src: '1601:6:82',
                                  typeDescriptions: {
                                    typeIdentifier: 't_type$_t_contract$_IStEth_$52054_$',
                                    typeString: 'type(contract IStEth)',
                                  },
                                },
                                id: 52195,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: 'typeConversion',
                                lValueRequested: false,
                                nameLocations: [],
                                names: [],
                                nodeType: 'FunctionCall',
                                src: '1601:13:82',
                                tryCall: false,
                                typeDescriptions: {
                                  typeIdentifier: 't_contract$_IStEth_$52054',
                                  typeString: 'contract IStEth',
                                },
                              },
                              id: 52196,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberLocation: '1615:20:82',
                              memberName: 'getPooledEthByShares',
                              nodeType: 'MemberAccess',
                              referencedDeclaration: 52045,
                              src: '1601:34:82',
                              typeDescriptions: {
                                typeIdentifier:
                                  't_function_external_view$_t_uint256_$returns$_t_uint256_$',
                                typeString: 'function (uint256) view external returns (uint256)',
                              },
                            },
                            id: 52198,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: 'functionCall',
                            lValueRequested: false,
                            nameLocations: [],
                            names: [],
                            nodeType: 'FunctionCall',
                            src: '1601:44:82',
                            tryCall: false,
                            typeDescriptions: {
                              typeIdentifier: 't_uint256',
                              typeString: 'uint256',
                            },
                          },
                          functionReturnParameters: 52170,
                          id: 52199,
                          nodeType: 'Return',
                          src: '1594:51:82',
                        },
                      ],
                    },
                  },
                  id: 52202,
                  nodeType: 'IfStatement',
                  src: '1422:234:82',
                  trueBody: {
                    id: 52185,
                    nodeType: 'Block',
                    src: '1460:76:82',
                    statements: [
                      {
                        expression: {
                          arguments: [
                            {
                              id: 52182,
                              name: 'inAmount',
                              nodeType: 'Identifier',
                              overloadedDeclarations: [],
                              referencedDeclaration: 52161,
                              src: '1516:8:82',
                              typeDescriptions: {
                                typeIdentifier: 't_uint256',
                                typeString: 'uint256',
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: 't_uint256',
                                typeString: 'uint256',
                              },
                            ],
                            expression: {
                              arguments: [
                                {
                                  id: 52179,
                                  name: 'STETH',
                                  nodeType: 'Identifier',
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 52154,
                                  src: '1488:5:82',
                                  typeDescriptions: {
                                    typeIdentifier: 't_address',
                                    typeString: 'address',
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: 't_address',
                                    typeString: 'address',
                                  },
                                ],
                                id: 52178,
                                name: 'IStEth',
                                nodeType: 'Identifier',
                                overloadedDeclarations: [],
                                referencedDeclaration: 52054,
                                src: '1481:6:82',
                                typeDescriptions: {
                                  typeIdentifier: 't_type$_t_contract$_IStEth_$52054_$',
                                  typeString: 'type(contract IStEth)',
                                },
                              },
                              id: 52180,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: 'typeConversion',
                              lValueRequested: false,
                              nameLocations: [],
                              names: [],
                              nodeType: 'FunctionCall',
                              src: '1481:13:82',
                              tryCall: false,
                              typeDescriptions: {
                                typeIdentifier: 't_contract$_IStEth_$52054',
                                typeString: 'contract IStEth',
                              },
                            },
                            id: 52181,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberLocation: '1495:20:82',
                            memberName: 'getSharesByPooledEth',
                            nodeType: 'MemberAccess',
                            referencedDeclaration: 52053,
                            src: '1481:34:82',
                            typeDescriptions: {
                              typeIdentifier:
                                't_function_external_view$_t_uint256_$returns$_t_uint256_$',
                              typeString: 'function (uint256) view external returns (uint256)',
                            },
                          },
                          id: 52183,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: 'functionCall',
                          lValueRequested: false,
                          nameLocations: [],
                          names: [],
                          nodeType: 'FunctionCall',
                          src: '1481:44:82',
                          tryCall: false,
                          typeDescriptions: {
                            typeIdentifier: 't_uint256',
                            typeString: 'uint256',
                          },
                        },
                        functionReturnParameters: 52170,
                        id: 52184,
                        nodeType: 'Return',
                        src: '1474:51:82',
                      },
                    ],
                  },
                },
                {
                  errorCall: {
                    arguments: [
                      {
                        id: 52206,
                        name: 'base',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52163,
                        src: '1704:4:82',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      {
                        id: 52207,
                        name: 'quote',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52165,
                        src: '1710:5:82',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                    ],
                    expression: {
                      argumentTypes: [
                        { typeIdentifier: 't_address', typeString: 'address' },
                        { typeIdentifier: 't_address', typeString: 'address' },
                      ],
                      expression: {
                        id: 52203,
                        name: 'Errors',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 54043,
                        src: '1672:6:82',
                        typeDescriptions: {
                          typeIdentifier: 't_type$_t_contract$_Errors_$54043_$',
                          typeString: 'type(library Errors)',
                        },
                      },
                      id: 52205,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      memberLocation: '1679:24:82',
                      memberName: 'PriceOracle_NotSupported',
                      nodeType: 'MemberAccess',
                      referencedDeclaration: 54029,
                      src: '1672:31:82',
                      typeDescriptions: {
                        typeIdentifier: 't_function_error_pure$_t_address_$_t_address_$returns$__$',
                        typeString: 'function (address,address) pure',
                      },
                    },
                    id: 52208,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    kind: 'functionCall',
                    lValueRequested: false,
                    nameLocations: [],
                    names: [],
                    nodeType: 'FunctionCall',
                    src: '1672:44:82',
                    tryCall: false,
                    typeDescriptions: {
                      typeIdentifier: 't_tuple$__$',
                      typeString: 'tuple()',
                    },
                  },
                  id: 52209,
                  nodeType: 'RevertStatement',
                  src: '1665:51:82',
                },
              ],
            },
            baseFunctions: [51181],
            documentation: {
              id: 52159,
              nodeType: 'StructuredDocumentation',
              src: '855:445:82',
              text: '@notice Get a quote by querying the exchange rate from the stEth contract.\n @dev Calls `getSharesByPooledEth` for stEth/wstEth and `getPooledEthByShares` for wstEth/stEth.\n @param inAmount The amount of `base` to convert.\n @param base The token that is being priced. Either `stEth` or `wstEth`.\n @param quote The token that is the unit of account. Either `wstEth` or `stEth`.\n @return The converted amount.',
            },
            implemented: true,
            kind: 'function',
            modifiers: [],
            name: '_getQuote',
            nameLocation: '1314:9:82',
            overrides: {
              id: 52167,
              nodeType: 'OverrideSpecifier',
              overrides: [],
              src: '1385:8:82',
            },
            parameters: {
              id: 52166,
              nodeType: 'ParameterList',
              parameters: [
                {
                  constant: false,
                  id: 52161,
                  mutability: 'mutable',
                  name: 'inAmount',
                  nameLocation: '1332:8:82',
                  nodeType: 'VariableDeclaration',
                  scope: 52211,
                  src: '1324:16:82',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_uint256',
                    typeString: 'uint256',
                  },
                  typeName: {
                    id: 52160,
                    name: 'uint256',
                    nodeType: 'ElementaryTypeName',
                    src: '1324:7:82',
                    typeDescriptions: {
                      typeIdentifier: 't_uint256',
                      typeString: 'uint256',
                    },
                  },
                  visibility: 'internal',
                },
                {
                  constant: false,
                  id: 52163,
                  mutability: 'mutable',
                  name: 'base',
                  nameLocation: '1350:4:82',
                  nodeType: 'VariableDeclaration',
                  scope: 52211,
                  src: '1342:12:82',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_address',
                    typeString: 'address',
                  },
                  typeName: {
                    id: 52162,
                    name: 'address',
                    nodeType: 'ElementaryTypeName',
                    src: '1342:7:82',
                    stateMutability: 'nonpayable',
                    typeDescriptions: {
                      typeIdentifier: 't_address',
                      typeString: 'address',
                    },
                  },
                  visibility: 'internal',
                },
                {
                  constant: false,
                  id: 52165,
                  mutability: 'mutable',
                  name: 'quote',
                  nameLocation: '1364:5:82',
                  nodeType: 'VariableDeclaration',
                  scope: 52211,
                  src: '1356:13:82',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_address',
                    typeString: 'address',
                  },
                  typeName: {
                    id: 52164,
                    name: 'address',
                    nodeType: 'ElementaryTypeName',
                    src: '1356:7:82',
                    stateMutability: 'nonpayable',
                    typeDescriptions: {
                      typeIdentifier: 't_address',
                      typeString: 'address',
                    },
                  },
                  visibility: 'internal',
                },
              ],
              src: '1323:47:82',
            },
            returnParameters: {
              id: 52170,
              nodeType: 'ParameterList',
              parameters: [
                {
                  constant: false,
                  id: 52169,
                  mutability: 'mutable',
                  name: '',
                  nameLocation: '-1:-1:-1',
                  nodeType: 'VariableDeclaration',
                  scope: 52211,
                  src: '1403:7:82',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_uint256',
                    typeString: 'uint256',
                  },
                  typeName: {
                    id: 52168,
                    name: 'uint256',
                    nodeType: 'ElementaryTypeName',
                    src: '1403:7:82',
                    typeDescriptions: {
                      typeIdentifier: 't_uint256',
                      typeString: 'uint256',
                    },
                  },
                  visibility: 'internal',
                },
              ],
              src: '1402:9:82',
            },
            scope: 52212,
            stateMutability: 'view',
            virtual: false,
            visibility: 'internal',
          },
        ],
        abstract: false,
        baseContracts: [
          {
            baseName: {
              id: 52145,
              name: 'BaseAdapter',
              nameLocations: ['401:11:82'],
              nodeType: 'IdentifierPath',
              referencedDeclaration: 51182,
              src: '401:11:82',
            },
            id: 52146,
            nodeType: 'InheritanceSpecifier',
            src: '401:11:82',
          },
        ],
        canonicalName: 'LidoOracle',
        contractDependencies: [],
        contractKind: 'contract',
        documentation: {
          id: 52144,
          nodeType: 'StructuredDocumentation',
          src: '178:200:82',
          text: '@title LidoOracle\n @custom:security-contact security@euler.xyz\n @author Euler Labs (https://www.eulerlabs.com/)\n @notice Adapter for pricing Lido stEth <-> wstEth via the stEth contract.',
        },
        fullyImplemented: true,
        linearizedBaseContracts: [52212, 51182, 54013],
        name: 'LidoOracle',
        nameLocation: '387:10:82',
        scope: 52213,
        usedErrors: [54029],
        usedEvents: [],
      },
    ],
    license: 'GPL-2.0-or-later',
  },
  id: 82,
} as const;
