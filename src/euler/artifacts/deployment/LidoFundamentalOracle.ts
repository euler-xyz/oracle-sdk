export default {
  abi: [
    {
      type: 'function',
      name: 'STETH',
      inputs: [],
      outputs: [{ name: '', type: 'address', internalType: 'address' }],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'WETH',
      inputs: [],
      outputs: [{ name: '', type: 'address', internalType: 'address' }],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'WSTETH',
      inputs: [],
      outputs: [{ name: '', type: 'address', internalType: 'address' }],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'getQuote',
      inputs: [
        { name: 'inAmount', type: 'uint256', internalType: 'uint256' },
        { name: 'base', type: 'address', internalType: 'address' },
        { name: 'quote', type: 'address', internalType: 'address' },
      ],
      outputs: [{ name: '', type: 'uint256', internalType: 'uint256' }],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'getQuotes',
      inputs: [
        { name: 'inAmount', type: 'uint256', internalType: 'uint256' },
        { name: 'base', type: 'address', internalType: 'address' },
        { name: 'quote', type: 'address', internalType: 'address' },
      ],
      outputs: [
        { name: '', type: 'uint256', internalType: 'uint256' },
        { name: '', type: 'uint256', internalType: 'uint256' },
      ],
      stateMutability: 'view',
    },
    {
      type: 'function',
      name: 'name',
      inputs: [],
      outputs: [{ name: '', type: 'string', internalType: 'string' }],
      stateMutability: 'view',
    },
    {
      type: 'error',
      name: 'PriceOracle_NotSupported',
      inputs: [
        { name: 'base', type: 'address', internalType: 'address' },
        { name: 'quote', type: 'address', internalType: 'address' },
      ],
    },
  ],
  bytecode: {
    object:
      '0x608060405234801561000f575f80fd5b506107238061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80630579e61f1461006457806306fdde0314610095578063ad5c4648146100b3578063ae68676c146100d1578063d9fb643a14610101578063e00bfe501461011f575b5f80fd5b61007e60048036038101906100799190610516565b61013d565b60405161008c929190610575565b60405180910390f35b61009d61015c565b6040516100aa9190610626565b60405180910390f35b6100bb610195565b6040516100c89190610655565b60405180910390f35b6100eb60048036038101906100e69190610516565b6101ad565b6040516100f8919061066e565b60405180910390f35b6101096101c2565b6040516101169190610655565b60405180910390f35b6101276101da565b6040516101349190610655565b60405180910390f35b5f805f61014b8686866101f2565b905080819250925050935093915050565b6040518060400160405280601581526020017f4c69646f46756e64616d656e74616c4f7261636c65000000000000000000000081525081565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b5f6101b98484846101f2565b90509392505050565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b5f73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156102815750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156103195773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff166319208451856040518263ffffffff1660e01b81526004016102d3919061066e565b602060405180830381865afa1580156102ee573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610312919061069b565b905061047e565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156103a7575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561043f5773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff16637a28fb88856040518263ffffffff1660e01b81526004016103f9919061066e565b602060405180830381865afa158015610414573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610438919061069b565b905061047e565b82826040517f4ca22af00000000000000000000000000000000000000000000000000000000081526004016104759291906106c6565b60405180910390fd5b9392505050565b5f80fd5b5f819050919050565b61049b81610489565b81146104a5575f80fd5b50565b5f813590506104b681610492565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104e5826104bc565b9050919050565b6104f5816104db565b81146104ff575f80fd5b50565b5f81359050610510816104ec565b92915050565b5f805f6060848603121561052d5761052c610485565b5b5f61053a868287016104a8565b935050602061054b86828701610502565b925050604061055c86828701610502565b9150509250925092565b61056f81610489565b82525050565b5f6040820190506105885f830185610566565b6105956020830184610566565b9392505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156105d35780820151818401526020810190506105b8565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6105f88261059c565b61060281856105a6565b93506106128185602086016105b6565b61061b816105de565b840191505092915050565b5f6020820190508181035f83015261063e81846105ee565b905092915050565b61064f816104db565b82525050565b5f6020820190506106685f830184610646565b92915050565b5f6020820190506106815f830184610566565b92915050565b5f8151905061069581610492565b92915050565b5f602082840312156106b0576106af610485565b5b5f6106bd84828501610687565b91505092915050565b5f6040820190506106d95f830185610646565b6106e66020830184610646565b939250505056fea264697066735822122035ddffb4651cb54a5652b328e89f0e8d0cf78d5f533b58089e728489d8cf8c5f64736f6c63430008170033',
    sourceMap: '478:1532:81:-:0;;;;;;;;;;;;;;;;;;;',
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      '0x608060405234801561000f575f80fd5b5060043610610060575f3560e01c80630579e61f1461006457806306fdde0314610095578063ad5c4648146100b3578063ae68676c146100d1578063d9fb643a14610101578063e00bfe501461011f575b5f80fd5b61007e60048036038101906100799190610516565b61013d565b60405161008c929190610575565b60405180910390f35b61009d61015c565b6040516100aa9190610626565b60405180910390f35b6100bb610195565b6040516100c89190610655565b60405180910390f35b6100eb60048036038101906100e69190610516565b6101ad565b6040516100f8919061066e565b60405180910390f35b6101096101c2565b6040516101169190610655565b60405180910390f35b6101276101da565b6040516101349190610655565b60405180910390f35b5f805f61014b8686866101f2565b905080819250925050935093915050565b6040518060400160405280601581526020017f4c69646f46756e64616d656e74616c4f7261636c65000000000000000000000081525081565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b5f6101b98484846101f2565b90509392505050565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca081565b73ae7ab96520de3a18e5e111b5eaab095312d7fe8481565b5f73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156102815750737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156103195773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff166319208451856040518263ffffffff1660e01b81526004016102d3919061066e565b602060405180830381865afa1580156102ee573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610312919061069b565b905061047e565b737f39c581f595b53c5cb19bd0b3f8da6c935e2ca073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156103a7575073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561043f5773ae7ab96520de3a18e5e111b5eaab095312d7fe8473ffffffffffffffffffffffffffffffffffffffff16637a28fb88856040518263ffffffff1660e01b81526004016103f9919061066e565b602060405180830381865afa158015610414573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610438919061069b565b905061047e565b82826040517f4ca22af00000000000000000000000000000000000000000000000000000000081526004016104759291906106c6565b60405180910390fd5b9392505050565b5f80fd5b5f819050919050565b61049b81610489565b81146104a5575f80fd5b50565b5f813590506104b681610492565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104e5826104bc565b9050919050565b6104f5816104db565b81146104ff575f80fd5b50565b5f81359050610510816104ec565b92915050565b5f805f6060848603121561052d5761052c610485565b5b5f61053a868287016104a8565b935050602061054b86828701610502565b925050604061055c86828701610502565b9150509250925092565b61056f81610489565b82525050565b5f6040820190506105885f830185610566565b6105956020830184610566565b9392505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156105d35780820151818401526020810190506105b8565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6105f88261059c565b61060281856105a6565b93506106128185602086016105b6565b61061b816105de565b840191505092915050565b5f6020820190508181035f83015261063e81846105ee565b905092915050565b61064f816104db565b82525050565b5f6020820190506106685f830184610646565b92915050565b5f6020820190506106815f830184610566565b92915050565b5f8151905061069581610492565b92915050565b5f602082840312156106b0576106af610485565b5b5f6106bd84828501610687565b91505092915050565b5f6040820190506106d95f830185610646565b6106e66020830184610646565b939250505056fea264697066735822122035ddffb4651cb54a5652b328e89f0e8d0cf78d5f533b58089e728489d8cf8c5f64736f6c63430008170033',
    sourceMap:
      '478:1532:81:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1003:215:72;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;563:53:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1066:73;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;759:153:72;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;896:75:81;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;715:74;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1003:215:72;1092:7;1101;1120:17;1140:32;1150:8;1160:4;1166:5;1140:9;:32::i;:::-;1120:52;;1190:9;1201;1182:29;;;;;1003:215;;;;;;:::o;563:53:81:-;;;;;;;;;;;;;;;;;;;:::o;1066:73::-;1097:42;1066:73;:::o;759:153:72:-;847:7;873:32;883:8;893:4;899:5;873:9;:32::i;:::-;866:39;;759:153;;;;;:::o;896:75:81:-;929:42;896:75;:::o;715:74::-;747:42;715:74;:::o;1592:416::-;1690:7;1097:42;1713:12;;:4;:12;;;:31;;;;;929:42;1729:15;;:5;:15;;;1713:31;1709:232;;;747:42;1767:34;;;1802:8;1767:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1760:51;;;;1709:232;929:42;1832:14;;:4;:14;;;:31;;;;;1097:42;1850:13;;:5;:13;;;1832:31;1828:113;;;747:42;1886:34;;;1921:8;1886:44;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1879:51;;;;1828:113;1989:4;1995:5;1957:44;;;;;;;;;;;;:::i;:::-;;;;;;;;1592:416;;;;;;:::o;88:117:165:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:126::-;727:7;767:42;760:5;756:54;745:65;;690:126;;;:::o;822:96::-;859:7;888:24;906:5;888:24;:::i;:::-;877:35;;822:96;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:619::-;1274:6;1282;1290;1339:2;1327:9;1318:7;1314:23;1310:32;1307:119;;;1345:79;;:::i;:::-;1307:119;1465:1;1490:53;1535:7;1526:6;1515:9;1511:22;1490:53;:::i;:::-;1480:63;;1436:117;1592:2;1618:53;1663:7;1654:6;1643:9;1639:22;1618:53;:::i;:::-;1608:63;;1563:118;1720:2;1746:53;1791:7;1782:6;1771:9;1767:22;1746:53;:::i;:::-;1736:63;;1691:118;1197:619;;;;;:::o;1822:118::-;1909:24;1927:5;1909:24;:::i;:::-;1904:3;1897:37;1822:118;;:::o;1946:332::-;2067:4;2105:2;2094:9;2090:18;2082:26;;2118:71;2186:1;2175:9;2171:17;2162:6;2118:71;:::i;:::-;2199:72;2267:2;2256:9;2252:18;2243:6;2199:72;:::i;:::-;1946:332;;;;;:::o;2284:99::-;2336:6;2370:5;2364:12;2354:22;;2284:99;;;:::o;2389:169::-;2473:11;2507:6;2502:3;2495:19;2547:4;2542:3;2538:14;2523:29;;2389:169;;;;:::o;2564:246::-;2645:1;2655:113;2669:6;2666:1;2663:13;2655:113;;;2754:1;2749:3;2745:11;2739:18;2735:1;2730:3;2726:11;2719:39;2691:2;2688:1;2684:10;2679:15;;2655:113;;;2802:1;2793:6;2788:3;2784:16;2777:27;2626:184;2564:246;;;:::o;2816:102::-;2857:6;2908:2;2904:7;2899:2;2892:5;2888:14;2884:28;2874:38;;2816:102;;;:::o;2924:377::-;3012:3;3040:39;3073:5;3040:39;:::i;:::-;3095:71;3159:6;3154:3;3095:71;:::i;:::-;3088:78;;3175:65;3233:6;3228:3;3221:4;3214:5;3210:16;3175:65;:::i;:::-;3265:29;3287:6;3265:29;:::i;:::-;3260:3;3256:39;3249:46;;3016:285;2924:377;;;;:::o;3307:313::-;3420:4;3458:2;3447:9;3443:18;3435:26;;3507:9;3501:4;3497:20;3493:1;3482:9;3478:17;3471:47;3535:78;3608:4;3599:6;3535:78;:::i;:::-;3527:86;;3307:313;;;;:::o;3626:118::-;3713:24;3731:5;3713:24;:::i;:::-;3708:3;3701:37;3626:118;;:::o;3750:222::-;3843:4;3881:2;3870:9;3866:18;3858:26;;3894:71;3962:1;3951:9;3947:17;3938:6;3894:71;:::i;:::-;3750:222;;;;:::o;3978:::-;4071:4;4109:2;4098:9;4094:18;4086:26;;4122:71;4190:1;4179:9;4175:17;4166:6;4122:71;:::i;:::-;3978:222;;;;:::o;4206:143::-;4263:5;4294:6;4288:13;4279:22;;4310:33;4337:5;4310:33;:::i;:::-;4206:143;;;;:::o;4355:351::-;4425:6;4474:2;4462:9;4453:7;4449:23;4445:32;4442:119;;;4480:79;;:::i;:::-;4442:119;4600:1;4625:64;4681:7;4672:6;4661:9;4657:22;4625:64;:::i;:::-;4615:74;;4571:128;4355:351;;;;:::o;4712:332::-;4833:4;4871:2;4860:9;4856:18;4848:26;;4884:71;4952:1;4941:9;4937:17;4928:6;4884:71;:::i;:::-;4965:72;5033:2;5022:9;5018:18;5009:6;4965:72;:::i;:::-;4712:332;;;;;:::o',
    linkReferences: {},
  },
  methodIdentifiers: {
    'STETH()': 'e00bfe50',
    'WETH()': 'ad5c4648',
    'WSTETH()': 'd9fb643a',
    'getQuote(uint256,address,address)': 'ae68676c',
    'getQuotes(uint256,address,address)': '0579e61f',
    'name()': '06fdde03',
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"}],"name":"PriceOracle_NotSupported","type":"error"},{"inputs":[],"name":"STETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WSTETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inAmount","type":"uint256"},{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"}],"name":"getQuote","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"inAmount","type":"uint256"},{"internalType":"address","name":"base","type":"address"},{"internalType":"address","name":"quote","type":"address"}],"name":"getQuotes","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Euler Labs (https://www.eulerlabs.com/)","custom:security-contact":"security@euler.xyz","details":"This is an exchange rate/fundamental oracle that assumes stEth and weth are 1:1.","errors":{"PriceOracle_NotSupported(address,address)":[{"params":{"base":"The address of the base asset.","quote":"The address of the quote asset."}}]},"kind":"dev","methods":{"getQuote(uint256,address,address)":{"params":{"base":"The token that is being priced.","inAmount":"The amount of `base` to convert.","quote":"The token that is the unit of account."},"returns":{"_0":"The amount of `quote` that is equivalent to `inAmount` of `base`."}},"getQuotes(uint256,address,address)":{"details":"Does not support true bid/ask pricing.","params":{"base":"The token that is being priced.","inAmount":"The amount of `base` to convert.","quote":"The token that is the unit of account."},"returns":{"_0":"The amount of `quote` you would get for selling `inAmount` of `base`.","_1":"The amount of `quote` you would spend for buying `inAmount` of `base`."}}},"stateVariables":{"STETH":{"details":"This address will not change."},"WETH":{"details":"This address will not change."},"WSTETH":{"details":"This address will not change."},"name":{"return":"The name of the oracle.","returns":{"_0":"The name of the oracle."}}},"title":"LidoFundamentalOracle","version":1},"userdoc":{"errors":{"PriceOracle_NotSupported(address,address)":[{"notice":"The base/quote path is not supported."}]},"kind":"user","methods":{"STETH()":{"notice":"The address of Lido staked Ether."},"WETH()":{"notice":"The address of Wrapped Ether."},"WSTETH()":{"notice":"The address of Lido wrapped staked Ether."},"getQuote(uint256,address,address)":{"notice":"One-sided price: How much quote token you would get for inAmount of base token, assuming no price spread."},"getQuotes(uint256,address,address)":{"notice":"Two-sided price: How much quote token you would get/spend for selling/buying inAmount of base token."},"name()":{"notice":"Get the name of the oracle."}},"notice":"Adapter for pricing weth <-> wstEth via the Lido stEth contract.","version":1}},"settings":{"compilationTarget":{"src/adapter/lido/LidoFundamentalOracle.sol":"LidoFundamentalOracle"},"evmVersion":"shanghai","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":false,"runs":200},"remappings":[":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":@pendle/core-v2/=lib/pendle-core-v2-public/contracts/",":@pyth/=lib/pyth-sdk-solidity/",":@redstone/evm-connector/=lib/redstone-oracles-monorepo/packages/evm-connector/contracts/",":@solady/=lib/solady/src/",":@uniswap/v3-core/=lib/v3-core/",":@uniswap/v3-periphery/=lib/v3-periphery/",":ds-test/=lib/forge-std/lib/ds-test/src/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":ethereum-vault-connector/=lib/ethereum-vault-connector/src/",":forge-std/=lib/forge-std/src/",":openzeppelin-contracts/=lib/openzeppelin-contracts/",":openzeppelin/=lib/openzeppelin-contracts/contracts/",":pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/",":pyth-sdk-solidity/=lib/pyth-sdk-solidity/",":redstone-oracles-monorepo/=lib/redstone-oracles-monorepo/",":solady/=lib/solady/",":v3-core/=lib/v3-core/contracts/",":v3-periphery/=lib/v3-periphery/contracts/"]},"sources":{"lib/forge-std/src/interfaces/IERC20.sol":{"keccak256":"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947","license":"MIT","urls":["bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7","dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9"]},"src/adapter/BaseAdapter.sol":{"keccak256":"0x1ca090708d2c03edd58fdb6c22638fce41e93c5f4021b382940d088ae49c81e3","license":"GPL-2.0-or-later","urls":["bzz-raw://d00bbb80bdb34321bea2055bcb1364cd860e7662ec513254ffa61698c09526b4","dweb:/ipfs/QmeCE976ZZy6oLCP2emgBjvx8vJxKvoEJ4yF65QKLjQJDo"]},"src/adapter/lido/IStEth.sol":{"keccak256":"0x1b317cd07f9bf07f1742c9cb4864effd6ccd67f4d67e3a950d700fdd44fe3952","license":"GPL-2.0-or-later","urls":["bzz-raw://8ee021222730fb5a64be54503aeaf6f9f66db001b97f24e0ebcebd40b56b1c6e","dweb:/ipfs/QmSZaSYdGredb87SFpu4L25VUmUgcT2rJKzw4FfDPRhkd6"]},"src/adapter/lido/LidoFundamentalOracle.sol":{"keccak256":"0xbb905ecae5b1589bb57f8e15aea3b528a5c5dc6e08c06095277a391fac68a15f","license":"GPL-2.0-or-later","urls":["bzz-raw://d0366ef9d4678b8f23b85e575972ed4780717d0a08111500c517c9b9a1df0f7b","dweb:/ipfs/QmYLzCvRgig13yBitcazwktqjjA8BqcYJt8Esc9HexGW9m"]},"src/interfaces/IPriceOracle.sol":{"keccak256":"0x03567dd4084dc74a9e2f9eeffce4d9047989b0d2122820716c3bc75891484308","license":"GPL-2.0-or-later","urls":["bzz-raw://23965a79475c85a0a8a3a137a76424f60debd9e592bc9127d463392fad7df30f","dweb:/ipfs/QmPc1bV3kZ3ynLGTqG6xRbZ3E5AstYdfipXbysSqYGhJYA"]},"src/lib/Errors.sol":{"keccak256":"0x2551662bcef8d4a5cb7cdc8cd404f28c726af1bcfe7ef371b22d53322a932698","license":"GPL-2.0-or-later","urls":["bzz-raw://1641b99e0c907950448d62205fc23b5550c44899ba8c0bc0274a6b0a501981b9","dweb:/ipfs/QmZvDhw4Ao3m8jRjNjT8Xq8imCPecJyytUTtCUjt5RoB4v"]}},"version":1}',
  metadata: {
    compiler: { version: '0.8.23+commit.f704f362' },
    language: 'Solidity',
    output: {
      abi: [
        {
          inputs: [
            { internalType: 'address', name: 'base', type: 'address' },
            { internalType: 'address', name: 'quote', type: 'address' },
          ],
          type: 'error',
          name: 'PriceOracle_NotSupported',
        },
        {
          inputs: [],
          stateMutability: 'view',
          type: 'function',
          name: 'STETH',
          outputs: [{ internalType: 'address', name: '', type: 'address' }],
        },
        {
          inputs: [],
          stateMutability: 'view',
          type: 'function',
          name: 'WETH',
          outputs: [{ internalType: 'address', name: '', type: 'address' }],
        },
        {
          inputs: [],
          stateMutability: 'view',
          type: 'function',
          name: 'WSTETH',
          outputs: [{ internalType: 'address', name: '', type: 'address' }],
        },
        {
          inputs: [
            { internalType: 'uint256', name: 'inAmount', type: 'uint256' },
            { internalType: 'address', name: 'base', type: 'address' },
            { internalType: 'address', name: 'quote', type: 'address' },
          ],
          stateMutability: 'view',
          type: 'function',
          name: 'getQuote',
          outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
        },
        {
          inputs: [
            { internalType: 'uint256', name: 'inAmount', type: 'uint256' },
            { internalType: 'address', name: 'base', type: 'address' },
            { internalType: 'address', name: 'quote', type: 'address' },
          ],
          stateMutability: 'view',
          type: 'function',
          name: 'getQuotes',
          outputs: [
            { internalType: 'uint256', name: '', type: 'uint256' },
            { internalType: 'uint256', name: '', type: 'uint256' },
          ],
        },
        {
          inputs: [],
          stateMutability: 'view',
          type: 'function',
          name: 'name',
          outputs: [{ internalType: 'string', name: '', type: 'string' }],
        },
      ],
      devdoc: {
        kind: 'dev',
        methods: {
          'getQuote(uint256,address,address)': {
            params: {
              base: 'The token that is being priced.',
              inAmount: 'The amount of `base` to convert.',
              quote: 'The token that is the unit of account.',
            },
            returns: {
              _0: 'The amount of `quote` that is equivalent to `inAmount` of `base`.',
            },
          },
          'getQuotes(uint256,address,address)': {
            details: 'Does not support true bid/ask pricing.',
            params: {
              base: 'The token that is being priced.',
              inAmount: 'The amount of `base` to convert.',
              quote: 'The token that is the unit of account.',
            },
            returns: {
              _0: 'The amount of `quote` you would get for selling `inAmount` of `base`.',
              _1: 'The amount of `quote` you would spend for buying `inAmount` of `base`.',
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: 'user',
        methods: {
          'STETH()': { notice: 'The address of Lido staked Ether.' },
          'WETH()': { notice: 'The address of Wrapped Ether.' },
          'WSTETH()': { notice: 'The address of Lido wrapped staked Ether.' },
          'getQuote(uint256,address,address)': {
            notice:
              'One-sided price: How much quote token you would get for inAmount of base token, assuming no price spread.',
          },
          'getQuotes(uint256,address,address)': {
            notice:
              'Two-sided price: How much quote token you would get/spend for selling/buying inAmount of base token.',
          },
          'name()': { notice: 'Get the name of the oracle.' },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        '@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/',
        '@pendle/core-v2/=lib/pendle-core-v2-public/contracts/',
        '@pyth/=lib/pyth-sdk-solidity/',
        '@redstone/evm-connector/=lib/redstone-oracles-monorepo/packages/evm-connector/contracts/',
        '@solady/=lib/solady/src/',
        '@uniswap/v3-core/=lib/v3-core/',
        '@uniswap/v3-periphery/=lib/v3-periphery/',
        'ds-test/=lib/forge-std/lib/ds-test/src/',
        'erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/',
        'ethereum-vault-connector/=lib/ethereum-vault-connector/src/',
        'forge-std/=lib/forge-std/src/',
        'openzeppelin-contracts/=lib/openzeppelin-contracts/',
        'openzeppelin/=lib/openzeppelin-contracts/contracts/',
        'pendle-core-v2-public/=lib/pendle-core-v2-public/contracts/',
        'pyth-sdk-solidity/=lib/pyth-sdk-solidity/',
        'redstone-oracles-monorepo/=lib/redstone-oracles-monorepo/',
        'solady/=lib/solady/',
        'v3-core/=lib/v3-core/contracts/',
        'v3-periphery/=lib/v3-periphery/contracts/',
      ],
      optimizer: { enabled: false, runs: 200 },
      metadata: { bytecodeHash: 'ipfs' },
      compilationTarget: {
        'src/adapter/lido/LidoFundamentalOracle.sol': 'LidoFundamentalOracle',
      },
      evmVersion: 'shanghai',
      libraries: {},
    },
    sources: {
      'lib/forge-std/src/interfaces/IERC20.sol': {
        keccak256: '0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947',
        urls: [
          'bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7',
          'dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9',
        ],
        license: 'MIT',
      },
      'src/adapter/BaseAdapter.sol': {
        keccak256: '0x1ca090708d2c03edd58fdb6c22638fce41e93c5f4021b382940d088ae49c81e3',
        urls: [
          'bzz-raw://d00bbb80bdb34321bea2055bcb1364cd860e7662ec513254ffa61698c09526b4',
          'dweb:/ipfs/QmeCE976ZZy6oLCP2emgBjvx8vJxKvoEJ4yF65QKLjQJDo',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/adapter/lido/IStEth.sol': {
        keccak256: '0x1b317cd07f9bf07f1742c9cb4864effd6ccd67f4d67e3a950d700fdd44fe3952',
        urls: [
          'bzz-raw://8ee021222730fb5a64be54503aeaf6f9f66db001b97f24e0ebcebd40b56b1c6e',
          'dweb:/ipfs/QmSZaSYdGredb87SFpu4L25VUmUgcT2rJKzw4FfDPRhkd6',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/adapter/lido/LidoFundamentalOracle.sol': {
        keccak256: '0xbb905ecae5b1589bb57f8e15aea3b528a5c5dc6e08c06095277a391fac68a15f',
        urls: [
          'bzz-raw://d0366ef9d4678b8f23b85e575972ed4780717d0a08111500c517c9b9a1df0f7b',
          'dweb:/ipfs/QmYLzCvRgig13yBitcazwktqjjA8BqcYJt8Esc9HexGW9m',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/interfaces/IPriceOracle.sol': {
        keccak256: '0x03567dd4084dc74a9e2f9eeffce4d9047989b0d2122820716c3bc75891484308',
        urls: [
          'bzz-raw://23965a79475c85a0a8a3a137a76424f60debd9e592bc9127d463392fad7df30f',
          'dweb:/ipfs/QmPc1bV3kZ3ynLGTqG6xRbZ3E5AstYdfipXbysSqYGhJYA',
        ],
        license: 'GPL-2.0-or-later',
      },
      'src/lib/Errors.sol': {
        keccak256: '0x2551662bcef8d4a5cb7cdc8cd404f28c726af1bcfe7ef371b22d53322a932698',
        urls: [
          'bzz-raw://1641b99e0c907950448d62205fc23b5550c44899ba8c0bc0274a6b0a501981b9',
          'dweb:/ipfs/QmZvDhw4Ao3m8jRjNjT8Xq8imCPecJyytUTtCUjt5RoB4v',
        ],
        license: 'GPL-2.0-or-later',
      },
    },
    version: 1,
  },
  ast: {
    absolutePath: 'src/adapter/lido/LidoFundamentalOracle.sol',
    id: 52136,
    exportedSymbols: {
      BaseAdapter: [51182],
      Errors: [54043],
      IPriceOracle: [54013],
      IStEth: [52054],
      LidoFundamentalOracle: [52135],
    },
    nodeType: 'SourceUnit',
    src: '45:1966:81',
    nodes: [
      {
        id: 52056,
        nodeType: 'PragmaDirective',
        src: '45:23:81',
        nodes: [],
        literals: ['solidity', '^', '0.8', '.0'],
      },
      {
        id: 52060,
        nodeType: 'ImportDirective',
        src: '70:69:81',
        nodes: [],
        absolutePath: 'src/adapter/BaseAdapter.sol',
        file: '../BaseAdapter.sol',
        nameLocation: '-1:-1:-1',
        scope: 52136,
        sourceUnit: 51183,
        symbolAliases: [
          {
            foreign: {
              id: 52057,
              name: 'BaseAdapter',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 51182,
              src: '78:11:81',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
          {
            foreign: {
              id: 52058,
              name: 'Errors',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 54043,
              src: '91:6:81',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
          {
            foreign: {
              id: 52059,
              name: 'IPriceOracle',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 54013,
              src: '99:12:81',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
        ],
        unitAlias: '',
      },
      {
        id: 52062,
        nodeType: 'ImportDirective',
        src: '140:36:81',
        nodes: [],
        absolutePath: 'src/adapter/lido/IStEth.sol',
        file: './IStEth.sol',
        nameLocation: '-1:-1:-1',
        scope: 52136,
        sourceUnit: 52055,
        symbolAliases: [
          {
            foreign: {
              id: 52061,
              name: 'IStEth',
              nodeType: 'Identifier',
              overloadedDeclarations: [],
              referencedDeclaration: 52054,
              src: '148:6:81',
              typeDescriptions: {},
            },
            nameLocation: '-1:-1:-1',
          },
        ],
        unitAlias: '',
      },
      {
        id: 52135,
        nodeType: 'ContractDefinition',
        src: '478:1532:81',
        nodes: [
          {
            id: 52069,
            nodeType: 'VariableDeclaration',
            src: '563:53:81',
            nodes: [],
            baseFunctions: [53986],
            constant: true,
            documentation: {
              id: 52066,
              nodeType: 'StructuredDocumentation',
              src: '530:28:81',
              text: '@inheritdoc IPriceOracle',
            },
            functionSelector: '06fdde03',
            mutability: 'constant',
            name: 'name',
            nameLocation: '586:4:81',
            scope: 52135,
            stateVariable: true,
            storageLocation: 'default',
            typeDescriptions: {
              typeIdentifier: 't_string_memory_ptr',
              typeString: 'string',
            },
            typeName: {
              id: 52067,
              name: 'string',
              nodeType: 'ElementaryTypeName',
              src: '563:6:81',
              typeDescriptions: {
                typeIdentifier: 't_string_storage_ptr',
                typeString: 'string',
              },
            },
            value: {
              hexValue: '4c69646f46756e64616d656e74616c4f7261636c65',
              id: 52068,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: 'string',
              lValueRequested: false,
              nodeType: 'Literal',
              src: '593:23:81',
              typeDescriptions: {
                typeIdentifier:
                  't_stringliteral_0825897acecea14ea9b7dd06ba393fbe014f6aeb09d61afa801814737109190a',
                typeString: 'literal_string "LidoFundamentalOracle"',
              },
              value: 'LidoFundamentalOracle',
            },
            visibility: 'public',
          },
          {
            id: 52073,
            nodeType: 'VariableDeclaration',
            src: '715:74:81',
            nodes: [],
            constant: true,
            documentation: {
              id: 52070,
              nodeType: 'StructuredDocumentation',
              src: '622:88:81',
              text: '@notice The address of Lido staked Ether.\n @dev This address will not change.',
            },
            functionSelector: 'e00bfe50',
            mutability: 'constant',
            name: 'STETH',
            nameLocation: '739:5:81',
            scope: 52135,
            stateVariable: true,
            storageLocation: 'default',
            typeDescriptions: {
              typeIdentifier: 't_address',
              typeString: 'address',
            },
            typeName: {
              id: 52071,
              name: 'address',
              nodeType: 'ElementaryTypeName',
              src: '715:7:81',
              stateMutability: 'nonpayable',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
            },
            value: {
              hexValue:
                '307861653761623936353230444533413138453565313131423545614162303935333132443766453834',
              id: 52072,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: 'number',
              lValueRequested: false,
              nodeType: 'Literal',
              src: '747:42:81',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
              value: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84',
            },
            visibility: 'public',
          },
          {
            id: 52077,
            nodeType: 'VariableDeclaration',
            src: '896:75:81',
            nodes: [],
            constant: true,
            documentation: {
              id: 52074,
              nodeType: 'StructuredDocumentation',
              src: '795:96:81',
              text: '@notice The address of Lido wrapped staked Ether.\n @dev This address will not change.',
            },
            functionSelector: 'd9fb643a',
            mutability: 'constant',
            name: 'WSTETH',
            nameLocation: '920:6:81',
            scope: 52135,
            stateVariable: true,
            storageLocation: 'default',
            typeDescriptions: {
              typeIdentifier: 't_address',
              typeString: 'address',
            },
            typeName: {
              id: 52075,
              name: 'address',
              nodeType: 'ElementaryTypeName',
              src: '896:7:81',
              stateMutability: 'nonpayable',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
            },
            value: {
              hexValue:
                '307837663339433538314635393542353363356362313962443062336638644136633933354532436130',
              id: 52076,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: 'number',
              lValueRequested: false,
              nodeType: 'Literal',
              src: '929:42:81',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
              value: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',
            },
            visibility: 'public',
          },
          {
            id: 52081,
            nodeType: 'VariableDeclaration',
            src: '1066:73:81',
            nodes: [],
            constant: true,
            documentation: {
              id: 52078,
              nodeType: 'StructuredDocumentation',
              src: '977:84:81',
              text: '@notice The address of Wrapped Ether.\n @dev This address will not change.',
            },
            functionSelector: 'ad5c4648',
            mutability: 'constant',
            name: 'WETH',
            nameLocation: '1090:4:81',
            scope: 52135,
            stateVariable: true,
            storageLocation: 'default',
            typeDescriptions: {
              typeIdentifier: 't_address',
              typeString: 'address',
            },
            typeName: {
              id: 52079,
              name: 'address',
              nodeType: 'ElementaryTypeName',
              src: '1066:7:81',
              stateMutability: 'nonpayable',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
            },
            value: {
              hexValue:
                '307843303261614133396232323346453844304130653543344632376541443930383343373536436332',
              id: 52080,
              isConstant: false,
              isLValue: false,
              isPure: true,
              kind: 'number',
              lValueRequested: false,
              nodeType: 'Literal',
              src: '1097:42:81',
              typeDescriptions: {
                typeIdentifier: 't_address',
                typeString: 'address',
              },
              value: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
            },
            visibility: 'public',
          },
          {
            id: 52134,
            nodeType: 'FunctionDefinition',
            src: '1592:416:81',
            nodes: [],
            body: {
              id: 52133,
              nodeType: 'Block',
              src: '1699:309:81',
              nodes: [],
              statements: [
                {
                  condition: {
                    commonType: {
                      typeIdentifier: 't_bool',
                      typeString: 'bool',
                    },
                    id: 52100,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    lValueRequested: false,
                    leftExpression: {
                      commonType: {
                        typeIdentifier: 't_address',
                        typeString: 'address',
                      },
                      id: 52096,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        id: 52094,
                        name: 'base',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52086,
                        src: '1713:4:81',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      nodeType: 'BinaryOperation',
                      operator: '==',
                      rightExpression: {
                        id: 52095,
                        name: 'WETH',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52081,
                        src: '1721:4:81',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      src: '1713:12:81',
                      typeDescriptions: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                    },
                    nodeType: 'BinaryOperation',
                    operator: '&&',
                    rightExpression: {
                      commonType: {
                        typeIdentifier: 't_address',
                        typeString: 'address',
                      },
                      id: 52099,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        id: 52097,
                        name: 'quote',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52088,
                        src: '1729:5:81',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      nodeType: 'BinaryOperation',
                      operator: '==',
                      rightExpression: {
                        id: 52098,
                        name: 'WSTETH',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52077,
                        src: '1738:6:81',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      src: '1729:15:81',
                      typeDescriptions: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                    },
                    src: '1713:31:81',
                    typeDescriptions: {
                      typeIdentifier: 't_bool',
                      typeString: 'bool',
                    },
                  },
                  falseBody: {
                    condition: {
                      commonType: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                      id: 52115,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      leftExpression: {
                        commonType: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                        id: 52111,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          id: 52109,
                          name: 'base',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52086,
                          src: '1832:4:81',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        nodeType: 'BinaryOperation',
                        operator: '==',
                        rightExpression: {
                          id: 52110,
                          name: 'WSTETH',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52077,
                          src: '1840:6:81',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        src: '1832:14:81',
                        typeDescriptions: {
                          typeIdentifier: 't_bool',
                          typeString: 'bool',
                        },
                      },
                      nodeType: 'BinaryOperation',
                      operator: '&&',
                      rightExpression: {
                        commonType: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                        id: 52114,
                        isConstant: false,
                        isLValue: false,
                        isPure: false,
                        lValueRequested: false,
                        leftExpression: {
                          id: 52112,
                          name: 'quote',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52088,
                          src: '1850:5:81',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        nodeType: 'BinaryOperation',
                        operator: '==',
                        rightExpression: {
                          id: 52113,
                          name: 'WETH',
                          nodeType: 'Identifier',
                          overloadedDeclarations: [],
                          referencedDeclaration: 52081,
                          src: '1859:4:81',
                          typeDescriptions: {
                            typeIdentifier: 't_address',
                            typeString: 'address',
                          },
                        },
                        src: '1850:13:81',
                        typeDescriptions: {
                          typeIdentifier: 't_bool',
                          typeString: 'bool',
                        },
                      },
                      src: '1832:31:81',
                      typeDescriptions: {
                        typeIdentifier: 't_bool',
                        typeString: 'bool',
                      },
                    },
                    id: 52124,
                    nodeType: 'IfStatement',
                    src: '1828:113:81',
                    trueBody: {
                      id: 52123,
                      nodeType: 'Block',
                      src: '1865:76:81',
                      statements: [
                        {
                          expression: {
                            arguments: [
                              {
                                id: 52120,
                                name: 'inAmount',
                                nodeType: 'Identifier',
                                overloadedDeclarations: [],
                                referencedDeclaration: 52084,
                                src: '1921:8:81',
                                typeDescriptions: {
                                  typeIdentifier: 't_uint256',
                                  typeString: 'uint256',
                                },
                              },
                            ],
                            expression: {
                              argumentTypes: [
                                {
                                  typeIdentifier: 't_uint256',
                                  typeString: 'uint256',
                                },
                              ],
                              expression: {
                                arguments: [
                                  {
                                    id: 52117,
                                    name: 'STETH',
                                    nodeType: 'Identifier',
                                    overloadedDeclarations: [],
                                    referencedDeclaration: 52073,
                                    src: '1893:5:81',
                                    typeDescriptions: {
                                      typeIdentifier: 't_address',
                                      typeString: 'address',
                                    },
                                  },
                                ],
                                expression: {
                                  argumentTypes: [
                                    {
                                      typeIdentifier: 't_address',
                                      typeString: 'address',
                                    },
                                  ],
                                  id: 52116,
                                  name: 'IStEth',
                                  nodeType: 'Identifier',
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 52054,
                                  src: '1886:6:81',
                                  typeDescriptions: {
                                    typeIdentifier: 't_type$_t_contract$_IStEth_$52054_$',
                                    typeString: 'type(contract IStEth)',
                                  },
                                },
                                id: 52118,
                                isConstant: false,
                                isLValue: false,
                                isPure: true,
                                kind: 'typeConversion',
                                lValueRequested: false,
                                nameLocations: [],
                                names: [],
                                nodeType: 'FunctionCall',
                                src: '1886:13:81',
                                tryCall: false,
                                typeDescriptions: {
                                  typeIdentifier: 't_contract$_IStEth_$52054',
                                  typeString: 'contract IStEth',
                                },
                              },
                              id: 52119,
                              isConstant: false,
                              isLValue: false,
                              isPure: false,
                              lValueRequested: false,
                              memberLocation: '1900:20:81',
                              memberName: 'getPooledEthByShares',
                              nodeType: 'MemberAccess',
                              referencedDeclaration: 52045,
                              src: '1886:34:81',
                              typeDescriptions: {
                                typeIdentifier:
                                  't_function_external_view$_t_uint256_$returns$_t_uint256_$',
                                typeString: 'function (uint256) view external returns (uint256)',
                              },
                            },
                            id: 52121,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            kind: 'functionCall',
                            lValueRequested: false,
                            nameLocations: [],
                            names: [],
                            nodeType: 'FunctionCall',
                            src: '1886:44:81',
                            tryCall: false,
                            typeDescriptions: {
                              typeIdentifier: 't_uint256',
                              typeString: 'uint256',
                            },
                          },
                          functionReturnParameters: 52093,
                          id: 52122,
                          nodeType: 'Return',
                          src: '1879:51:81',
                        },
                      ],
                    },
                  },
                  id: 52125,
                  nodeType: 'IfStatement',
                  src: '1709:232:81',
                  trueBody: {
                    id: 52108,
                    nodeType: 'Block',
                    src: '1746:76:81',
                    statements: [
                      {
                        expression: {
                          arguments: [
                            {
                              id: 52105,
                              name: 'inAmount',
                              nodeType: 'Identifier',
                              overloadedDeclarations: [],
                              referencedDeclaration: 52084,
                              src: '1802:8:81',
                              typeDescriptions: {
                                typeIdentifier: 't_uint256',
                                typeString: 'uint256',
                              },
                            },
                          ],
                          expression: {
                            argumentTypes: [
                              {
                                typeIdentifier: 't_uint256',
                                typeString: 'uint256',
                              },
                            ],
                            expression: {
                              arguments: [
                                {
                                  id: 52102,
                                  name: 'STETH',
                                  nodeType: 'Identifier',
                                  overloadedDeclarations: [],
                                  referencedDeclaration: 52073,
                                  src: '1774:5:81',
                                  typeDescriptions: {
                                    typeIdentifier: 't_address',
                                    typeString: 'address',
                                  },
                                },
                              ],
                              expression: {
                                argumentTypes: [
                                  {
                                    typeIdentifier: 't_address',
                                    typeString: 'address',
                                  },
                                ],
                                id: 52101,
                                name: 'IStEth',
                                nodeType: 'Identifier',
                                overloadedDeclarations: [],
                                referencedDeclaration: 52054,
                                src: '1767:6:81',
                                typeDescriptions: {
                                  typeIdentifier: 't_type$_t_contract$_IStEth_$52054_$',
                                  typeString: 'type(contract IStEth)',
                                },
                              },
                              id: 52103,
                              isConstant: false,
                              isLValue: false,
                              isPure: true,
                              kind: 'typeConversion',
                              lValueRequested: false,
                              nameLocations: [],
                              names: [],
                              nodeType: 'FunctionCall',
                              src: '1767:13:81',
                              tryCall: false,
                              typeDescriptions: {
                                typeIdentifier: 't_contract$_IStEth_$52054',
                                typeString: 'contract IStEth',
                              },
                            },
                            id: 52104,
                            isConstant: false,
                            isLValue: false,
                            isPure: false,
                            lValueRequested: false,
                            memberLocation: '1781:20:81',
                            memberName: 'getSharesByPooledEth',
                            nodeType: 'MemberAccess',
                            referencedDeclaration: 52053,
                            src: '1767:34:81',
                            typeDescriptions: {
                              typeIdentifier:
                                't_function_external_view$_t_uint256_$returns$_t_uint256_$',
                              typeString: 'function (uint256) view external returns (uint256)',
                            },
                          },
                          id: 52106,
                          isConstant: false,
                          isLValue: false,
                          isPure: false,
                          kind: 'functionCall',
                          lValueRequested: false,
                          nameLocations: [],
                          names: [],
                          nodeType: 'FunctionCall',
                          src: '1767:44:81',
                          tryCall: false,
                          typeDescriptions: {
                            typeIdentifier: 't_uint256',
                            typeString: 'uint256',
                          },
                        },
                        functionReturnParameters: 52093,
                        id: 52107,
                        nodeType: 'Return',
                        src: '1760:51:81',
                      },
                    ],
                  },
                },
                {
                  errorCall: {
                    arguments: [
                      {
                        id: 52129,
                        name: 'base',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52086,
                        src: '1989:4:81',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                      {
                        id: 52130,
                        name: 'quote',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 52088,
                        src: '1995:5:81',
                        typeDescriptions: {
                          typeIdentifier: 't_address',
                          typeString: 'address',
                        },
                      },
                    ],
                    expression: {
                      argumentTypes: [
                        { typeIdentifier: 't_address', typeString: 'address' },
                        { typeIdentifier: 't_address', typeString: 'address' },
                      ],
                      expression: {
                        id: 52126,
                        name: 'Errors',
                        nodeType: 'Identifier',
                        overloadedDeclarations: [],
                        referencedDeclaration: 54043,
                        src: '1957:6:81',
                        typeDescriptions: {
                          typeIdentifier: 't_type$_t_contract$_Errors_$54043_$',
                          typeString: 'type(library Errors)',
                        },
                      },
                      id: 52128,
                      isConstant: false,
                      isLValue: false,
                      isPure: false,
                      lValueRequested: false,
                      memberLocation: '1964:24:81',
                      memberName: 'PriceOracle_NotSupported',
                      nodeType: 'MemberAccess',
                      referencedDeclaration: 54029,
                      src: '1957:31:81',
                      typeDescriptions: {
                        typeIdentifier: 't_function_error_pure$_t_address_$_t_address_$returns$__$',
                        typeString: 'function (address,address) pure',
                      },
                    },
                    id: 52131,
                    isConstant: false,
                    isLValue: false,
                    isPure: false,
                    kind: 'functionCall',
                    lValueRequested: false,
                    nameLocations: [],
                    names: [],
                    nodeType: 'FunctionCall',
                    src: '1957:44:81',
                    tryCall: false,
                    typeDescriptions: {
                      typeIdentifier: 't_tuple$__$',
                      typeString: 'tuple()',
                    },
                  },
                  id: 52132,
                  nodeType: 'RevertStatement',
                  src: '1950:51:81',
                },
              ],
            },
            baseFunctions: [51181],
            documentation: {
              id: 52082,
              nodeType: 'StructuredDocumentation',
              src: '1146:441:81',
              text: '@notice Get a quote by querying the exchange rate from the stEth contract.\n @dev Calls `getSharesByPooledEth` for weth/wstEth and `getPooledEthByShares` for wstEth/weth.\n @param inAmount The amount of `base` to convert.\n @param base The token that is being priced. Either `weth` or `wstEth`.\n @param quote The token that is the unit of account. Either `wstEth` or `weth`.\n @return The converted amount.',
            },
            implemented: true,
            kind: 'function',
            modifiers: [],
            name: '_getQuote',
            nameLocation: '1601:9:81',
            overrides: {
              id: 52090,
              nodeType: 'OverrideSpecifier',
              overrides: [],
              src: '1672:8:81',
            },
            parameters: {
              id: 52089,
              nodeType: 'ParameterList',
              parameters: [
                {
                  constant: false,
                  id: 52084,
                  mutability: 'mutable',
                  name: 'inAmount',
                  nameLocation: '1619:8:81',
                  nodeType: 'VariableDeclaration',
                  scope: 52134,
                  src: '1611:16:81',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_uint256',
                    typeString: 'uint256',
                  },
                  typeName: {
                    id: 52083,
                    name: 'uint256',
                    nodeType: 'ElementaryTypeName',
                    src: '1611:7:81',
                    typeDescriptions: {
                      typeIdentifier: 't_uint256',
                      typeString: 'uint256',
                    },
                  },
                  visibility: 'internal',
                },
                {
                  constant: false,
                  id: 52086,
                  mutability: 'mutable',
                  name: 'base',
                  nameLocation: '1637:4:81',
                  nodeType: 'VariableDeclaration',
                  scope: 52134,
                  src: '1629:12:81',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_address',
                    typeString: 'address',
                  },
                  typeName: {
                    id: 52085,
                    name: 'address',
                    nodeType: 'ElementaryTypeName',
                    src: '1629:7:81',
                    stateMutability: 'nonpayable',
                    typeDescriptions: {
                      typeIdentifier: 't_address',
                      typeString: 'address',
                    },
                  },
                  visibility: 'internal',
                },
                {
                  constant: false,
                  id: 52088,
                  mutability: 'mutable',
                  name: 'quote',
                  nameLocation: '1651:5:81',
                  nodeType: 'VariableDeclaration',
                  scope: 52134,
                  src: '1643:13:81',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_address',
                    typeString: 'address',
                  },
                  typeName: {
                    id: 52087,
                    name: 'address',
                    nodeType: 'ElementaryTypeName',
                    src: '1643:7:81',
                    stateMutability: 'nonpayable',
                    typeDescriptions: {
                      typeIdentifier: 't_address',
                      typeString: 'address',
                    },
                  },
                  visibility: 'internal',
                },
              ],
              src: '1610:47:81',
            },
            returnParameters: {
              id: 52093,
              nodeType: 'ParameterList',
              parameters: [
                {
                  constant: false,
                  id: 52092,
                  mutability: 'mutable',
                  name: '',
                  nameLocation: '-1:-1:-1',
                  nodeType: 'VariableDeclaration',
                  scope: 52134,
                  src: '1690:7:81',
                  stateVariable: false,
                  storageLocation: 'default',
                  typeDescriptions: {
                    typeIdentifier: 't_uint256',
                    typeString: 'uint256',
                  },
                  typeName: {
                    id: 52091,
                    name: 'uint256',
                    nodeType: 'ElementaryTypeName',
                    src: '1690:7:81',
                    typeDescriptions: {
                      typeIdentifier: 't_uint256',
                      typeString: 'uint256',
                    },
                  },
                  visibility: 'internal',
                },
              ],
              src: '1689:9:81',
            },
            scope: 52135,
            stateMutability: 'view',
            virtual: false,
            visibility: 'internal',
          },
        ],
        abstract: false,
        baseContracts: [
          {
            baseName: {
              id: 52064,
              name: 'BaseAdapter',
              nameLocations: ['512:11:81'],
              nodeType: 'IdentifierPath',
              referencedDeclaration: 51182,
              src: '512:11:81',
            },
            id: 52065,
            nodeType: 'InheritanceSpecifier',
            src: '512:11:81',
          },
        ],
        canonicalName: 'LidoFundamentalOracle',
        contractDependencies: [],
        contractKind: 'contract',
        documentation: {
          id: 52063,
          nodeType: 'StructuredDocumentation',
          src: '178:300:81',
          text: '@title LidoFundamentalOracle\n @custom:security-contact security@euler.xyz\n @author Euler Labs (https://www.eulerlabs.com/)\n @notice Adapter for pricing weth <-> wstEth via the Lido stEth contract.\n @dev This is an exchange rate/fundamental oracle that assumes stEth and weth are 1:1.',
        },
        fullyImplemented: true,
        linearizedBaseContracts: [52135, 51182, 54013],
        name: 'LidoFundamentalOracle',
        nameLocation: '487:21:81',
        scope: 52136,
        usedErrors: [54029],
        usedEvents: [],
      },
    ],
    license: 'GPL-2.0-or-later',
  },
  id: 81,
} as const;
