export default {
  language: 'Solidity',
  sources: {
    'lib/euler-price-oracle/src/adapter/lido/LidoOracle.sol': {
      content:
        '// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport {BaseAdapter, Errors, IPriceOracle} from "../BaseAdapter.sol";\nimport {IStEth} from "./IStEth.sol";\n\n/// @title LidoOracle\n/// @custom:security-contact security@euler.xyz\n/// @author Euler Labs (https://www.eulerlabs.com/)\n/// @notice Adapter for pricing Lido stEth <-> wstEth via the stEth contract.\ncontract LidoOracle is BaseAdapter {\n    /// @inheritdoc IPriceOracle\n    string public constant name = "LidoOracle";\n    /// @notice The address of Lido staked Ether.\n    /// @dev This address will not change.\n    address public constant STETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    /// @notice The address of Lido wrapped staked Ether\n    /// @dev This address will not change.\n    address public constant WSTETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n\n    /// @notice Get a quote by querying the exchange rate from the stEth contract.\n    /// @dev Calls `getSharesByPooledEth` for stEth/wstEth and `getPooledEthByShares` for wstEth/stEth.\n    /// @param inAmount The amount of `base` to convert.\n    /// @param base The token that is being priced. Either `stEth` or `wstEth`.\n    /// @param quote The token that is the unit of account. Either `wstEth` or `stEth`.\n    /// @return The converted amount.\n    function _getQuote(uint256 inAmount, address base, address quote) internal view override returns (uint256) {\n        if (base == STETH && quote == WSTETH) {\n            return IStEth(STETH).getSharesByPooledEth(inAmount);\n        } else if (base == WSTETH && quote == STETH) {\n            return IStEth(STETH).getPooledEthByShares(inAmount);\n        }\n        revert Errors.PriceOracle_NotSupported(base, quote);\n    }\n}\n',
    },
    'lib/euler-price-oracle/src/adapter/BaseAdapter.sol': {
      content:
        '// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\nimport {IERC20} from "forge-std/interfaces/IERC20.sol";\nimport {IPriceOracle} from "../interfaces/IPriceOracle.sol";\nimport {Errors} from "../lib/Errors.sol";\n\n/// @title BaseAdapter\n/// @custom:security-contact security@euler.xyz\n/// @author Euler Labs (https://www.eulerlabs.com/)\n/// @notice Abstract adapter with virtual bid/ask pricing.\nabstract contract BaseAdapter is IPriceOracle {\n    // @dev Addresses <= 0x00..00ffffffff are considered to have 18 decimals without dispatching a call.\n    // This avoids collisions between ISO 4217 representations and (future) precompiles.\n    uint256 internal constant ADDRESS_RESERVED_RANGE = 0xffffffff;\n\n    /// @inheritdoc IPriceOracle\n    function getQuote(uint256 inAmount, address base, address quote) external view returns (uint256) {\n        return _getQuote(inAmount, base, quote);\n    }\n\n    /// @inheritdoc IPriceOracle\n    /// @dev Does not support true bid/ask pricing.\n    function getQuotes(uint256 inAmount, address base, address quote) external view returns (uint256, uint256) {\n        uint256 outAmount = _getQuote(inAmount, base, quote);\n        return (outAmount, outAmount);\n    }\n\n    /// @notice Determine the decimals of an asset.\n    /// @param asset ERC20 token address or other asset.\n    /// @dev Oracles can use ERC-7535, ISO 4217 or other conventions to represent non-ERC20 assets as addresses.\n    /// Integrator Note: `_getDecimals` will return 18 if `asset` is:\n    /// - any address <= 0x00000000000000000000000000000000ffffffff (4294967295)\n    /// - an EOA or a to-be-deployed contract (which may implement `decimals()` after deployment).\n    /// - a contract that does not implement `decimals()`.\n    /// @return The decimals of the asset.\n    function _getDecimals(address asset) internal view returns (uint8) {\n        if (uint160(asset) <= ADDRESS_RESERVED_RANGE) return 18;\n        (bool success, bytes memory data) = asset.staticcall(abi.encodeCall(IERC20.decimals, ()));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Return the quote for the given price query.\n    /// @dev Must be overridden in the inheriting contract.\n    function _getQuote(uint256, address, address) internal view virtual returns (uint256);\n}\n',
    },
    'lib/euler-price-oracle/src/adapter/lido/IStEth.sol': {
      content:
        '// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title IStEth\n/// @author Lido (https://github.com/lidofinance/lido-dao/blob/5fcedc6e9a9f3ec154e69cff47c2b9e25503a78a/contracts/0.6.12/interfaces/IStETH.sol)\n/// @notice Partial interface for Lido Staked Ether.\ninterface IStEth {\n    /// @notice Get the amount of stEth equivalent to `sharesAmount` of wstEth.\n    /// @param sharesAmount The amount of wstEth to convert.\n    /// @return The amount of stEth equivalent to `sharesAmount` of wstEth.\n    function getPooledEthByShares(uint256 sharesAmount) external view returns (uint256);\n    /// @notice Get the amount of wstEth equivalent to `ethAmount` of stEth.\n    /// @param ethAmount The amount of stEth to convert.\n    /// @return The amount of wstEth equivalent to `ethAmount` of stEth.\n    function getSharesByPooledEth(uint256 ethAmount) external view returns (uint256);\n}\n',
    },
    'lib/forge-std/src/interfaces/IERC20.sol': {
      content:
        "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\n/// @dev Interface of the ERC20 standard as defined in the EIP.\n/// @dev This includes the optional name, symbol, and decimals metadata.\ninterface IERC20 {\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\n    /// is the new allowance.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice Returns the amount of tokens in existence.\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Returns the amount of tokens owned by `account`.\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\n    /// to spend on behalf of `owner`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\n    /// `amount` is then deducted from the caller's allowance.\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /// @notice Returns the name of the token.\n    function name() external view returns (string memory);\n\n    /// @notice Returns the symbol of the token.\n    function symbol() external view returns (string memory);\n\n    /// @notice Returns the decimals places of the token.\n    function decimals() external view returns (uint8);\n}\n",
    },
    'lib/euler-price-oracle/src/interfaces/IPriceOracle.sol': {
      content:
        '// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.8.0;\n\n/// @title IPriceOracle\n/// @custom:security-contact security@euler.xyz\n/// @author Euler Labs (https://www.eulerlabs.com/)\n/// @notice Common PriceOracle interface.\ninterface IPriceOracle {\n    /// @notice Get the name of the oracle.\n    /// @return The name of the oracle.\n    function name() external view returns (string memory);\n\n    /// @notice One-sided price: How much quote token you would get for inAmount of base token, assuming no price spread.\n    /// @param inAmount The amount of `base` to convert.\n    /// @param base The token that is being priced.\n    /// @param quote The token that is the unit of account.\n    /// @return outAmount The amount of `quote` that is equivalent to `inAmount` of `base`.\n    function getQuote(uint256 inAmount, address base, address quote) external view returns (uint256 outAmount);\n\n    /// @notice Two-sided price: How much quote token you would get/spend for selling/buying inAmount of base token.\n    /// @param inAmount The amount of `base` to convert.\n    /// @param base The token that is being priced.\n    /// @param quote The token that is the unit of account.\n    /// @return bidOutAmount The amount of `quote` you would get for selling `inAmount` of `base`.\n    /// @return askOutAmount The amount of `quote` you would spend for buying `inAmount` of `base`.\n    function getQuotes(uint256 inAmount, address base, address quote)\n        external\n        view\n        returns (uint256 bidOutAmount, uint256 askOutAmount);\n}\n',
    },
    'lib/euler-price-oracle/src/lib/Errors.sol': {
      content:
        '// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title Errors\n/// @custom:security-contact security@euler.xyz\n/// @author Euler Labs (https://www.eulerlabs.com/)\n/// @notice Collects common errors in PriceOracles.\nlibrary Errors {\n    /// @notice The external feed returned an invalid answer.\n    error PriceOracle_InvalidAnswer();\n    /// @notice The configuration parameters for the PriceOracle are invalid.\n    error PriceOracle_InvalidConfiguration();\n    /// @notice The base/quote path is not supported.\n    /// @param base The address of the base asset.\n    /// @param quote The address of the quote asset.\n    error PriceOracle_NotSupported(address base, address quote);\n    /// @notice The quote cannot be completed due to overflow.\n    error PriceOracle_Overflow();\n    /// @notice The price is too stale.\n    /// @param staleness The time elapsed since the price was updated.\n    /// @param maxStaleness The maximum time elapsed since the last price update.\n    error PriceOracle_TooStale(uint256 staleness, uint256 maxStaleness);\n    /// @notice The method can only be called by the governor.\n    error Governance_CallerNotGovernor();\n}\n',
    },
  },
  settings: {
    remappings: [
      'lib/euler-price-oracle:@openzeppelin/contracts/=lib/euler-price-oracle/lib/openzeppelin-contracts/contracts/',
      'lib/euler-earn:@openzeppelin/=lib/euler-earn/lib/openzeppelin-contracts/',
      'lib/euler-earn:@openzeppelin-upgradeable/=lib/euler-earn/lib/openzeppelin-contracts-upgradeable/contracts/',
      'lib/euler-earn:ethereum-vault-connector/=lib/euler-earn/lib/ethereum-vault-connector/src/',
      'lib/layerzero-devtools/packages/oft-evm/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts/contracts/',
      'lib/layerzero-devtools/packages/oft-evm-upgradeable/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/',
      'lib/layerzero-devtools/packages/oapp-evm-upgradeable/contracts:@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/',
      '@layerzerolabs/oft-evm/=lib/layerzero-devtools/packages/oft-evm/',
      '@layerzerolabs/oapp-evm/=lib/layerzero-devtools/packages/oapp-evm/',
      '@layerzerolabs/oapp-evm-upgradeable/=lib/layerzero-devtools/packages/oapp-evm-upgradeable/',
      '@layerzerolabs/lz-evm-protocol-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/protocol/',
      '@layerzerolabs/lz-evm-messagelib-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/messagelib/',
      '@layerzerolabs/lz-evm-oapp-v2/=lib/layerzero-v2/packages/layerzero-v2/evm/oapp/',
      'openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/',
      'openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/',
      'ethereum-vault-connector/=lib/ethereum-vault-connector/src/',
      'evc/=lib/ethereum-vault-connector/src/',
      'evk/=lib/euler-vault-kit/src/',
      'evk-test/=lib/euler-vault-kit/test/',
      'euler-price-oracle/=lib/euler-price-oracle/src/',
      'euler-price-oracle-test/=lib/euler-price-oracle/test/',
      'fee-flow/=lib/fee-flow/src/',
      'reward-streams/=lib/reward-streams/src/',
      '@openzeppelin/=lib/openzeppelin-contracts/contracts/',
      'euler-earn/=lib/euler-earn/src/',
      'layerzero/oft-evm/=lib/layerzero-devtools/packages/oft-evm/contracts/',
      'layerzero/oft-evm-upgradeable/=lib/layerzero-devtools/packages/oft-evm-upgradeable/contracts/',
      'solidity-bytes-utils/=lib/solidity-bytes-utils/',
      '@axiom-crypto/v2-periphery/=lib/euler-price-oracle/lib/axiom-std/lib/axiom-v2-periphery/src/',
      '@openzeppelin-upgradeable/=lib/euler-earn/lib/openzeppelin-contracts-upgradeable/contracts/',
      '@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/',
      '@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/',
      '@pendle/core-v2/=lib/euler-price-oracle/lib/pendle-core-v2-public/contracts/',
      '@pyth/=lib/euler-price-oracle/lib/pyth-sdk-solidity/',
      '@redstone/evm-connector/=lib/euler-price-oracle/lib/redstone-oracles-monorepo/packages/evm-connector/contracts/',
      '@solady/=lib/euler-price-oracle/lib/solady/src/',
      '@uniswap/v3-core/=lib/euler-price-oracle/lib/v3-core/',
      '@uniswap/v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/',
      'ERC4626/=lib/euler-earn/lib/properties/lib/ERC4626/contracts/',
      'axiom-std/=lib/euler-price-oracle/lib/axiom-std/src/',
      'axiom-v2-periphery/=lib/euler-price-oracle/lib/axiom-v2-periphery/src/',
      'crytic-properties/=lib/euler-earn/lib/properties/contracts/',
      'ds-test/=lib/ethereum-vault-connector/lib/forge-std/lib/ds-test/src/',
      'erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/',
      'euler-vault-kit/=lib/euler-vault-kit/',
      'forge-gas-snapshot/=lib/euler-vault-kit/lib/permit2/lib/forge-gas-snapshot/src/',
      'forge-std/=lib/forge-std/src/',
      'halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/',
      'layerzero-devtools/=lib/layerzero-devtools/packages/toolbox-foundry/src/',
      'layerzero-v2/=lib/layerzero-v2/',
      'morpho-blue-irm/=lib/morpho-blue-irm/src/',
      'morpho-blue/=lib/morpho-blue-irm/lib/morpho-blue/',
      'native-token-transfers/=lib/native-token-transfers/',
      'openzeppelin/=lib/ethereum-vault-connector/lib/openzeppelin-contracts/contracts/',
      'pendle-core-v2-public/=lib/euler-price-oracle/lib/pendle-core-v2-public/contracts/',
      'permit2/=lib/euler-vault-kit/lib/permit2/',
      'properties/=lib/euler-earn/lib/properties/contracts/',
      'pyth-sdk-solidity/=lib/euler-price-oracle/lib/pyth-sdk-solidity/',
      'redstone-oracles-monorepo/=lib/euler-price-oracle/lib/',
      'solady/=lib/euler-price-oracle/lib/solady/src/',
      'solmate/=lib/fee-flow/lib/solmate/src/',
      'v3-core/=lib/euler-price-oracle/lib/v3-core/contracts/',
      'v3-periphery/=lib/euler-price-oracle/lib/v3-periphery/contracts/',
      'wormhole-solidity-sdk/=lib/native-token-transfers/evm/lib/wormhole-solidity-sdk/src/',
    ],
    optimizer: { enabled: true, runs: 20000 },
    metadata: { useLiteralContent: false, bytecodeHash: 'ipfs', appendCBOR: true },
    outputSelection: {
      '*': {
        '*': [
          'abi',
          'evm.bytecode.object',
          'evm.bytecode.sourceMap',
          'evm.bytecode.linkReferences',
          'evm.deployedBytecode.object',
          'evm.deployedBytecode.sourceMap',
          'evm.deployedBytecode.linkReferences',
          'evm.deployedBytecode.immutableReferences',
          'evm.methodIdentifiers',
          'metadata',
        ],
      },
    },
    evmVersion: 'cancun',
    viaIR: false,
    libraries: {},
  },
} as const;
